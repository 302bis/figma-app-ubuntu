import { Lazy } from "lazy-val";
import { ErrorObject } from "ajv";
export declare function readConfig<T>(configFile: string, projectDir?: string, log?: (message: string) => void): Promise<T>;
export declare function findAndReadConfig<T>(request: ReadConfigRequest): Promise<T | null>;
export declare function orNullIfFileNotExist<T>(promise: Promise<T>): Promise<T | null>;
export declare function orIfFileNotExist<T>(promise: Promise<T>, fallbackValue: T): Promise<T>;
export interface ReadConfigRequest {
    packageKey: string;
    configFilename: string;
    projectDir: string;
    packageMetadata: Lazy<{
        [key: string]: any;
    } | null> | null;
    log?: (message: string) => void;
}
export declare function loadConfig<T>(request: ReadConfigRequest): Promise<T | null>;
export declare function getConfig<T>(request: ReadConfigRequest, configPath?: string | null, configFromOptions?: T | null): Promise<T>;
export declare function loadParentConfig<T>(request: ReadConfigRequest, spec: string): Promise<T>;
export declare function validateConfig(config: any, scheme: Lazy<any>, errorMessage: (error: string, errors: Array<ErrorObject>) => string): Promise<void>;
export declare function loadEnv(envFile: string): Promise<{
    [name: string]: string;
} | null>;
