{"version":3,"file":"log.js","sourceRoot":"","sources":["../src/log.ts"],"names":[],"mappings":";;;;;;;;;;;;AACA,AAAO,AAAK,AAAM,AAAO;;;;;;AACzB,AAAO,AAAE,AAAG,AAAI,AAAQ,AAAE,AAAM,AAAY;;;;;;AAG5C,IAAI,AAAO,UAAuC,AAAI,AAEtD,AAAM;oBAAqB,AAAyC;AAClE,AAAO,cAAG,AAAK,AACjB;AAAC;AAED;AACE,gBAA+B,AAAsB;AAAtB,aAAM,SAAN,AAAM,AAAgB,AACrD;AAAC;AAED,AAAI,SAAC,AAAe;AAClB,AAAI,aAAC,AAAG,IAAC,AAAK,kCAAC,AAAM,AAAC,mBAAY,AAAO,OAAE,AAAC,AAAC,AAC/C;AAAC;AAED,AAAG,QAAC,AAAe;AACjB,AAAE,AAAC,YAAC,AAAO,WAAI,AAAI,AAAC,MAAC,AAAC;AACpB,AAAI,iBAAC,AAAM,OAAC,AAAK,AAAC,SAAG,AAAO,OAAI,AAAC,AACnC;AAAC,AACD,AAAI,eAAC,AAAC;AACJ,AAAO,oBAAC,AAAO,AAAC,AAClB;AAAC,AACH;AAAC;AAED,AAAI,SAAC,AAAa,OAAE,AAA6C;AAC/D,cAAM,AAAO,UAAG,AAAgC;AAChD,AAAI,aAAC,AAAG,IAAC,AAAK,AAAC;AACf,AAAM,eAAC,AAAO,AAChB;AAAC,AACF;;AAED,MAAgB,kBAAQ,AAAM;AAC5B,gBAAY,AAAsB;AAChC,AAAK,cAAC,AAAM,AAAC,AACf;AAAC;AAED,AAAI,SAAC,AAAe;AAClB,AAAI,aAAC,AAAG,AAAC,OAAG,AAAQ,2CAAC,AAAS,AAAC,eAAK,AAAK,kCAAC,AAAM,OAAC,AAAO,AAAC,QAAE,AAAC,AAC9D;AAAC,AACF;;AAED,MAAM,AAAM,SAAI,AAAO,QAAC,AAAc,OAAC,AAAK,AAAC,AAAC,QAAC,IAAI,AAAS,UAAC,AAAO,QAAC,AAAM,AAAC,AAAC,AAAC,UAAC,IAAI,AAAM,OAAC,AAAO,QAAC,AAAM,AAAC,AAEzG,AAAM;cAAe,AAAe;AAClC,AAAM,WAAC,AAAI,KAAC,AAAO,AAAC,AACtB;AAAC,AAED,AAAM;aAAc,AAAe;AACjC,AAAM,WAAC,AAAG,IAAC,AAAO,AAAC,AACrB;AAAC,AAED,AAAM;cAAe,AAAa,OAAE,AAA4C;AAC9E,AAAM,WAAC,AAAM,OAAC,AAAI,KAAC,AAAK,OAAE,AAAO,AAAC,AACpC;AAAC","sourcesContent":["import BluebirdPromise from \"bluebird-lst\"\nimport chalk from \"chalk\"\nimport { get as getEmoji } from \"node-emoji\"\nimport WritableStream = NodeJS.WritableStream\n\nlet printer: ((message: string) => void) | null = null\n\nexport function setPrinter(value: ((message: string) => void) | null) {\n  printer = value\n}\n\nclass Logger {\n  constructor(protected readonly stream: WritableStream) {\n  }\n\n  warn(message: string): void {\n    this.log(chalk.yellow(`Warning: ${message}`))\n  }\n\n  log(message: string): void {\n    if (printer == null) {\n      this.stream.write(`${message}\\n`)\n    }\n    else {\n      printer(message)\n    }\n  }\n\n  task(title: string, _promise: BluebirdPromise<any> | Promise<any>): BluebirdPromise<any> {\n    const promise = _promise as BluebirdPromise<any>\n    this.log(title)\n    return promise\n  }\n}\n\nclass TtyLogger extends Logger {\n  constructor(stream: WritableStream) {\n    super(stream)\n  }\n\n  warn(message: string): void {\n    this.log(`${getEmoji(\"warning\")}  ${chalk.yellow(message)}`)\n  }\n}\n\nconst logger = (process.stdout as any).isTTY ? new TtyLogger(process.stdout) : new Logger(process.stdout)\n\nexport function warn(message: string) {\n  logger.warn(message)\n}\n\nexport function log(message: string) {\n  logger.log(message)\n}\n\nexport function task(title: string, promise: BluebirdPromise<any> | Promise<any>): BluebirdPromise<any> {\n  return logger.task(title, promise)\n}"]}
