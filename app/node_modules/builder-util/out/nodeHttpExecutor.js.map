{"version":3,"file":"nodeHttpExecutor.js","sourceRoot":"","sources":["../src/nodeHttpExecutor.ts"],"names":[],"mappings":"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","sourcesContent":["import { CancellationToken, configureRequestOptionsFromUrl, DownloadOptions, HttpExecutor } from \"builder-util-runtime\"\nimport { ensureDir, readFile } from \"fs-extra-p\"\nimport { Agent, ClientRequest, request as httpRequest } from \"http\"\nimport * as https from \"https\"\nimport { parse as parseIni } from \"ini\"\nimport { homedir } from \"os\"\nimport * as path from \"path\"\nimport { parse as parseUrl } from \"url\"\n\nexport class NodeHttpExecutor extends HttpExecutor<ClientRequest> {\n  private httpsAgentPromise: Promise<Agent> | null\n\n  async download(url: string, destination: string, options: DownloadOptions = {cancellationToken: new CancellationToken()}): Promise<string> {\n    if (!options.skipDirCreation) {\n      await ensureDir(path.dirname(destination))\n    }\n\n    if (this.httpsAgentPromise == null) {\n      this.httpsAgentPromise = createAgent()\n    }\n\n    const agent = await this.httpsAgentPromise\n    return await options.cancellationToken.createPromise<string>((resolve, reject, onCancel) => {\n      this.doDownload(configureRequestOptionsFromUrl(url, {\n        headers: options.headers || undefined,\n        agent,\n      }), destination, 0, options, error => {\n        if (error == null) {\n          resolve(destination)\n        }\n        else {\n          reject(error)\n        }\n      }, onCancel)\n    })\n  }\n\n  doRequest(options: any, callback: (response: any) => void): any {\n    return (options.protocol === \"http:\" ? httpRequest : https.request)(options, callback)\n  }\n}\n\nexport const httpExecutor: NodeHttpExecutor = new NodeHttpExecutor()\n\n// only https proxy\nasync function proxyFromNpm() {\n  let data = \"\"\n  try {\n    data = await readFile(path.join(homedir(), \".npmrc\"), \"utf-8\")\n  }\n  catch (ignored) {\n    return null\n  }\n\n  if (!data) {\n    return null\n  }\n\n  try {\n    const config = parseIni(data)\n    return config[\"https-proxy\"] || config.proxy\n  }\n  catch (e) {\n    // used in nsis auto-updater, do not use .util.warn here\n    console.warn(e)\n    return null\n  }\n}\n\n// only https url\nasync function createAgent() {\n  let proxyString = process.env.npm_config_https_proxy || process.env.HTTPS_PROXY || process.env.https_proxy || process.env.npm_config_proxy\n  if (!proxyString) {\n    proxyString = await proxyFromNpm()\n    if (!proxyString) {\n      return null\n    }\n  }\n\n  const proxy = parseUrl(proxyString)\n\n  const proxyProtocol = proxy.protocol === \"https:\" ? \"Https\" : \"Http\"\n  return require(\"tunnel-agent\")[`httpsOver${proxyProtocol}`]({\n    proxy: {\n      port: proxy.port || (proxyProtocol === \"Https\" ? 443 : 80),\n      host: proxy.hostname,\n      proxyAuth: proxy.auth\n    }\n  })\n}"]}
