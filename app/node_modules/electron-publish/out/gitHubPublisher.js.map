{"version":3,"file":"gitHubPublisher.js","sourceRoot":"","sources":["../src/gitHubPublisher.ts"],"names":[],"mappings":"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","sourcesContent":["import BluebirdPromise from \"bluebird-lst\"\nimport { Arch, debug, isEmptyOrSpaces, isTokenCharValid, log, warn, isEnvTrue } from \"builder-util\"\nimport { configureRequestOptions, GithubOptions, HttpError, parseJson } from \"builder-util-runtime\"\nimport { httpExecutor } from \"builder-util/out/nodeHttpExecutor\"\nimport { ClientRequest } from \"http\"\nimport mime from \"mime\"\nimport { parse as parseUrl } from \"url\"\nimport { getCiTag, HttpPublisher, PublishContext, PublishOptions } from \"./publisher\"\n\nexport interface Release {\n  id: number\n  tag_name: string\n\n  draft: boolean\n  prerelease: boolean\n\n  published_at: string\n\n  upload_url: string\n}\n\ninterface Asset {\n  id: number\n  name: string\n}\n\nexport class GitHubPublisher extends HttpPublisher {\n  private tag: string\n  private _releasePromise: Promise<Release | null>\n\n  private readonly token: string\n\n  readonly providerName = \"GitHub\"\n\n  private readonly releaseType: \"draft\" | \"prerelease\" | \"release\"\n\n  /** @private */\n  get releasePromise(): Promise<Release | null> {\n    if (this._releasePromise == null) {\n      this._releasePromise = this.token === \"__test__\" ? BluebirdPromise.resolve(null as any) : this.getOrCreateRelease()\n    }\n    return this._releasePromise\n  }\n\n  constructor(context: PublishContext, private readonly info: GithubOptions, private readonly version: string, private readonly options: PublishOptions = {}) {\n    super(context, true)\n\n    let token = info.token\n    if (isEmptyOrSpaces(token)) {\n      token = process.env.GH_TOKEN\n      if (isEmptyOrSpaces(token)) {\n        throw new Error(`GitHub Personal Access Token is not set, neither programmatically, nor using env \"GH_TOKEN\"`)\n      }\n\n      token = token.trim()\n\n      if (!isTokenCharValid(token)) {\n        throw new Error(`GitHub Personal Access Token (${JSON.stringify(token)}) contains invalid characters, please check env \"GH_TOKEN\"`)\n      }\n    }\n\n    this.token = token!\n\n    if (version.startsWith(\"v\")) {\n      throw new Error(`Version must not starts with \"v\": ${version}`)\n    }\n\n    this.tag = info.vPrefixedTagName === false ? version : `v${version}`\n\n    if (isEnvTrue(process.env.EP_DRAFT)) {\n      this.releaseType = \"draft\"\n    }\n    else if (isEnvTrue(process.env.EP_PRELEASE)) {\n      this.releaseType = \"prerelease\"\n    }\n    else if (info.releaseType != null) {\n      this.releaseType = info.releaseType\n    }\n    else if ((options as any).prerelease) {\n      this.releaseType = \"prerelease\"\n    }\n    else {\n      this.releaseType = (options as any).draft === false ? \"release\" : \"draft\"\n    }\n  }\n\n  private async getOrCreateRelease(): Promise<Release | null> {\n    // we don't use \"Get a release by tag name\" because \"tag name\" means existing git tag, but we draft release and don't create git tag\n    const releases = await this.githubRequest<Array<Release>>(`/repos/${this.info.owner}/${this.info.repo}/releases`, this.token)\n    for (const release of releases) {\n      if (!(release.tag_name === this.tag || release.tag_name === this.version)) {\n        continue\n      }\n\n      if (release.draft) {\n        return release\n      }\n\n      // https://github.com/electron-userland/electron-builder/issues/1197\n      // https://electron-builder.slack.com/archives/general/p1485961449000202\n      // https://github.com/electron-userland/electron-builder/issues/2072\n      if (this.releaseType === \"draft\") {\n        warn(`Release with tag ${this.tag} already exists`)\n        return null\n      }\n\n      // https://github.com/electron-userland/electron-builder/issues/1133\n      // https://github.com/electron-userland/electron-builder/issues/2074\n      // if release created < 2 hours — allow to upload\n      const publishedAt = release.published_at == null ? null : Date.parse(release.published_at)\n      if (publishedAt != null && (Date.now() - publishedAt) > (2 * 3600 * 1000)) {\n        // https://github.com/electron-userland/electron-builder/issues/1183#issuecomment-275867187\n        warn(`Release with tag ${this.tag} published at ${new Date(publishedAt).toString()}, more than 2 hours ago`)\n        return null\n      }\n      return release\n    }\n\n    // https://github.com/electron-userland/electron-builder/issues/1835\n    if (this.options.publish === \"always\" || getCiTag() != null) {\n      log(`Release with tag ${this.tag} doesn't exist, creating one`)\n      return this.createRelease()\n    }\n    return null\n  }\n\n  protected async doUpload(fileName: string, arch: Arch, dataLength: number, requestProcessor: (request: ClientRequest, reject: (error: Error) => void) => void): Promise<any> {\n    const release = await this.releasePromise\n    if (release == null) {\n      warn(`Release with tag ${this.tag} doesn't exist and is not created, artifact ${fileName} is not published`)\n      return\n    }\n\n    const parsedUrl = parseUrl(release.upload_url.substring(0, release.upload_url.indexOf(\"{\")) + \"?name=\" + fileName)\n    let attemptNumber = 0\n    uploadAttempt: for (let i = 0; i < 3; i++) {\n      try {\n        return await httpExecutor.doApiRequest(configureRequestOptions({\n          hostname: parsedUrl.hostname,\n          path: parsedUrl.path,\n          method: \"POST\",\n          headers: {\n            Accept: \"application/vnd.github.v3+json\",\n            \"Content-Type\": mime.getType(fileName) || \"application/octet-stream\",\n            \"Content-Length\": dataLength\n          }\n        }, this.token), this.context.cancellationToken, requestProcessor)\n      }\n      catch (e) {\n        if (e instanceof HttpError) {\n          if (e.response.statusCode === 422 && e.description != null && e.description.errors != null && e.description.errors[0].code === \"already_exists\") {\n            // delete old artifact and re-upload\n            debug(`Artifact ${fileName} already exists on GitHub, overwrite one`)\n\n            const assets = await this.githubRequest<Array<Asset>>(`/repos/${this.info.owner}/${this.info.repo}/releases/${release.id}/assets`, this.token, null)\n            for (const asset of assets) {\n              if (asset!.name === fileName) {\n                await this.githubRequest<void>(`/repos/${this.info.owner}/${this.info.repo}/releases/assets/${asset!.id}`, this.token, null, \"DELETE\")\n                continue uploadAttempt\n              }\n            }\n\n            debug(`Artifact ${fileName} not found on GitHub, trying to upload again`)\n            continue\n          }\n          else if (attemptNumber++ < 3 && e.response.statusCode === 502) {\n            continue\n          }\n        }\n        else if (attemptNumber++ < 3 && e.code === \"EPIPE\") {\n          continue\n        }\n\n        throw e\n      }\n    }\n  }\n\n  private createRelease() {\n    return this.githubRequest<Release>(`/repos/${this.info.owner}/${this.info.repo}/releases`, this.token, {\n      tag_name: this.tag,\n      name: this.version,\n      draft: this.releaseType === \"draft\",\n      prerelease: this.releaseType === \"prerelease\",\n    })\n  }\n\n  // test only\n  //noinspection JSUnusedGlobalSymbols\n  async getRelease(): Promise<any> {\n    return this.githubRequest<Release>(`/repos/${this.info.owner}/${this.info.repo}/releases/${(await this._releasePromise)!.id}`, this.token)\n  }\n\n  //noinspection JSUnusedGlobalSymbols\n  async deleteRelease(): Promise<any> {\n    const release = await this._releasePromise\n    if (release == null) {\n      return\n    }\n\n    for (let i = 0; i < 3; i++) {\n      try {\n        return await this.githubRequest(`/repos/${this.info.owner}/${this.info.repo}/releases/${release.id}`, this.token, null, \"DELETE\")\n      }\n      catch (e) {\n        if (e instanceof HttpError) {\n          if (e.response.statusCode === 404) {\n            warn(`Cannot delete release ${release.id} — doesn't exist`)\n            return\n          }\n          else if (e.response.statusCode === 405 || e.response.statusCode === 502) {\n            continue\n          }\n        }\n\n        throw e\n      }\n    }\n\n    warn(`Cannot delete release ${release.id}`)\n  }\n\n  private githubRequest<T>(path: string, token: string | null, data: {[name: string]: any; } | null = null, method?: \"GET\" | \"DELETE\" | \"PUT\"): Promise<T> {\n    // host can contains port, but node http doesn't support host as url does\n    const baseUrl = parseUrl(`https://${this.info.host || \"api.github.com\"}`)\n    return parseJson(httpExecutor.request(configureRequestOptions({\n      hostname: baseUrl.hostname,\n      port: baseUrl.port as any,\n      path: (this.info.host != null && this.info.host !== \"github.com\") ? `/api/v3${path.startsWith(\"/\") ? path : `/${path}`}` : path,\n      headers: {Accept: \"application/vnd.github.v3+json\"}\n    }, token, method), this.context.cancellationToken, data))\n  }\n\n  toString() {\n    return `Github (owner: ${this.info.owner}, project: ${this.info.repo}, version: ${this.version})`\n  }\n}"]}
