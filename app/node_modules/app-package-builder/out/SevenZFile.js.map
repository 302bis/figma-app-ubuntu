{"version":3,"file":"SevenZFile.js","sourceRoot":"","sources":["../src/SevenZFile.ts"],"names":[],"mappings":"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","sourcesContent":["import { SIGNATURE_HEADER_SIZE } from \"builder-util-runtime/out/blockMapApi\"\nimport { read } from \"fs-extra-p\"\nimport { Archive, StreamMap } from \"./Archive\"\nimport { BitSet } from \"./BitSet\"\nimport { BindPair, Coder, Folder } from \"./Folder\"\nimport { LittleEndianBuffer } from \"./LittleEndianBuffer\"\nimport { SevenZArchiveEntry } from \"./SevenZArchiveEntry\"\n\nconst sevenZSignature = Buffer.concat([Buffer.from(\"7z\", \"binary\"), Buffer.from([0xBC, 0xAF, 0x27, 0x1C])])\n/* start header size */\n\nconst kEnd = 0x00\nconst kArchiveProperties = 0x02\nconst kAdditionalStreamsInfo = 0x03\nconst kMainStreamsInfo = 0x04\nconst kEncodedHeader = 0x17\nconst kHeader = 0x01\nconst kFilesInfo = 0x05\nconst kPackInfo = 0x06\nconst kUnpackInfo = 0x07\nconst kSubStreamsInfo = 0x08\nconst kSize = 0x09\nconst kCRC = 0x0A\nconst kFolder = 0x0B\nconst kCodersUnpackSize = 0x0C\nconst kNumUnpackStream = 0x0D\nconst kEmptyStream = 0x0E\nconst kEmptyFile = 0x0F\nconst kAnti = 0x10\nconst kName = 0x11\nconst kCTime = 0x12\nconst kATime = 0x13\nconst kMTime = 0x14\nconst kWinAttributes = 0x15\nconst kStartPos = 0x18\nconst kDummy = 0x19\n\nexport class SevenZFile {\n  archive: Archive\n\n  constructor(readonly fd: number) {\n  }\n\n  async read() {\n    this.archive = await this.readHeaders()\n  }\n\n  private async readHeaders() {\n    let _buf = Buffer.allocUnsafe(SIGNATURE_HEADER_SIZE)\n    await read(this.fd, _buf, 0, _buf.length, 0)\n    const index = sevenZSignature.length\n    const signature = _buf.slice(0, index)\n    if (!sevenZSignature.equals(signature)) {\n      throw new Error(\"Bad 7z signature\")\n    }\n\n    let buf = new LittleEndianBuffer(_buf, index)\n    // 7zFormat.txt has it wrong - it's first major then minor\n    const archiveVersionMajor = buf.readByte()\n    const archiveVersionMinor = buf.readByte()\n    if (archiveVersionMajor !== 0) {\n      throw new Error(`Unsupported 7z version (${archiveVersionMajor},${archiveVersionMinor})`)\n    }\n\n    const startHeaderCrc = buf.readUnsignedInt()\n\n    const startHeader = readStartHeader(startHeaderCrc, buf)\n    _buf = Buffer.allocUnsafe(startHeader.nextHeaderSize)\n    await read(this.fd, _buf, 0, _buf.length, SIGNATURE_HEADER_SIZE + startHeader.nextHeaderOffset)\n\n    // if (startHeader.nextHeaderCrc !== crc32(_buf)) {\n    //   throw new Error(\"Header CRC mismatch\")\n    // }\n\n    const archive = new Archive()\n    archive.headerSize = startHeader.nextHeaderSize\n\n    buf = new LittleEndianBuffer(_buf)\n    const nid = buf.readByte()\n    if (nid === kEncodedHeader) {\n      throw new Error(\"Encoded header is not supported\")\n    }\n    if (nid === kHeader) {\n      readHeader(buf, archive)\n    }\n    else {\n      throw new Error(\"Broken or unsupported archive: no Header\")\n    }\n\n    return archive\n  }\n\n  // private async readEncodedHeader(header: LittleEndianBuffer, archive: Archive) {\n  //   readStreamsInfo(header, archive)\n  //\n  //   throw new Error(\"readEncodedHeader\")\n  //\n  //   // const folder = archive.folders[0]\n  //   // const firstPackStreamIndex = 0\n  //   // const folderOffset = SIGNATURE_HEADER_SIZE + archive.packPos\n  //   // const _buf = Buffer.allocUnsafe(archive.packSizes[firstPackStreamIndex])\n  //   // await read(this.fd, _buf, 0, _buf.length, folderOffset)\n  //   // for (const coder of folder.getOrderedCoders()) {\n  //   //   if (coder.numInStreams !== 1 || coder.numOutStreams !== 1) {\n  //   //       throw new Error(\"Multi input/output stream coders are not yet supported\")\n  //   //   }\n  //     // inputStreamStack = Coders.addDecoder(fileName, inputStreamStack, folder.getUnpackSizeForCoder(coder), coder)\n  // // }\n  // // if (folder.hasCrc) {\n  // //     inputStreamStack = new CRC32VerifyingInputStream(inputStreamStack,\n  // //             folder.getUnpackSize(), folder.crc);\n  // // }\n  // // const nextHeader = Buffer.allocUnsafe(folder.getUnpackSize())\n  // // try (DataInputStream nextHeaderInputStream = new DataInputStream(inputStreamStack)) {\n  // //     nextHeaderInputStream.readFully(nextHeader);\n  // // }\n  // // return new LittleEndianBuffer(nextHeader)\n  // }\n}\n\n// noinspection JSUnusedLocalSymbols\nfunction readStartHeader(startHeaderCrc: number, buf: LittleEndianBuffer) {\n  // if (startHeaderCrc !== crc32(buf.slice())) {\n  //   throw new Error(\"startHeader CRC mismatch\")\n  // }\n\n  const nextHeaderOffset = buf.readLong()\n  const nextHeaderSize = buf.readLong()\n  const nextHeaderCrc = buf.readUnsignedInt()\n  return new StartHeader(nextHeaderOffset, nextHeaderSize, nextHeaderCrc)\n}\n\nfunction readHeader(header: LittleEndianBuffer, archive: Archive) {\n  let nid = header.readUnsignedByte()\n\n  if (nid === kArchiveProperties) {\n    readArchiveProperties(header)\n    nid = header.readUnsignedByte()\n  }\n\n  if (nid === kAdditionalStreamsInfo) {\n    throw new Error(\"Additional streams unsupported\")\n  }\n\n  if (nid === kMainStreamsInfo) {\n    readStreamsInfo(header, archive)\n    nid = header.readUnsignedByte()\n  }\n\n  if (nid === kFilesInfo) {\n    readFilesInfo(header, archive)\n    nid = header.readUnsignedByte()\n  }\n\n  if (nid !== kEnd) {\n    throw new Error(`Badly terminated header, found ${nid}`)\n  }\n}\n\nfunction readFilesInfo(header: LittleEndianBuffer, archive: Archive) {\n  const numFiles = readUint64(header)\n  const files = new Array<SevenZArchiveEntry>(numFiles)\n  for (let i = 0; i < files.length; i++) {\n    files[i] = new SevenZArchiveEntry()\n  }\n  let isEmptyStream: BitSet | null = null\n  let isEmptyFile: BitSet | null = null\n  let isAnti: BitSet | null = null\n  while (true) {\n    const propertyType = header.readUnsignedByte()\n    if (propertyType === 0) {\n      break\n    }\n    const size = readUint64(header)\n    switch (propertyType) {\n      case kEmptyStream: {\n        isEmptyStream = readBits(header, files.length)\n        break\n      }\n      case kEmptyFile: {\n        if (isEmptyStream == null) { // protect against NPE\n          throw new Error(\"Header format error: kEmptyStream must appear before kEmptyFile\")\n        }\n        isEmptyFile = readBits(header, isEmptyStream.cardinality())\n        break\n      }\n      case kAnti: {\n        if (isEmptyStream == null) { // protect against NPE\n          throw new Error(\"Header format error: kEmptyStream must appear before kAnti\")\n        }\n        isAnti = readBits(header, isEmptyStream.cardinality())\n        break\n      }\n      case kName: {\n        const external = header.readUnsignedByte()\n        if (external !== 0) {\n          throw new Error(\"Not implemented\")\n        }\n        if (((size - 1) & 1) !== 0) {\n          throw new Error(\"File names length invalid\")\n        }\n        const names = Buffer.allocUnsafe(size - 1)\n        header.get(names)\n        let nextFile = 0\n        let nextName = 0\n        for (let i = 0; i < names.length; i += 2) {\n          if (names[i] === 0 && names[i + 1] === 0) {\n            files[nextFile++].name = Buffer.from(names.slice(nextName, i)).toString(\"utf16le\")\n            nextName = i + 2\n          }\n        }\n        if (nextName !== names.length || nextFile !== files.length) {\n          throw new Error(\"Error parsing file names\")\n        }\n        break\n      }\n      case kCTime: {\n        throw new Error(\"Must be no kCTime\")\n      }\n      case kATime: {\n        throw new Error(\"Must be no kATime\")\n      }\n      case kMTime: {\n        throw new Error(\"Must be no kMTime\")\n      }\n      case kWinAttributes: {\n        const attributesDefined = readAllOrBits(header, files.length)\n        const external = header.readUnsignedByte()\n        if (external !== 0) {\n          throw new Error(\"Unimplemented\")\n        }\n        for (let i = 0; i < files.length; i++) {\n          files[i].hasWindowsAttributes = attributesDefined.get(i)\n          if (files[i].hasWindowsAttributes) {\n            files[i].windowsAttributes = header.readInt()\n          }\n        }\n        break\n      }\n      case kStartPos: {\n        throw new Error(\"kStartPos is unsupported\")\n      }\n      case kDummy: {\n        if (skipBytesFully(header, size) < size) {\n          throw new Error(\"Incomplete kDummy property\")\n        }\n        break\n      }\n\n      default: {\n        if (skipBytesFully(header, size) < size) {\n          throw new Error(`Incomplete property of type ${propertyType}`)\n        }\n        break\n      }\n    }\n  }\n\n  let nonEmptyFileCounter = 0\n  let emptyFileCounter = 0\n  for (let i = 0; i < files.length; i++) {\n    files[i].hasStream = isEmptyStream == null || !isEmptyStream.get(i)\n    if (files[i].hasStream) {\n      files[i].isDirectory = false\n      files[i].isAntiItem = false\n      files[i].hasCrc = archive.subStreamsInfo.hasCrc.get(nonEmptyFileCounter)\n      files[i].crcValue = archive.subStreamsInfo.crcs[nonEmptyFileCounter]\n      files[i].size = archive.subStreamsInfo.unpackSizes[nonEmptyFileCounter]\n      ++nonEmptyFileCounter\n    }\n    else {\n      files[i].isDirectory = isEmptyFile == null || !isEmptyFile.get(emptyFileCounter)\n      files[i].isAntiItem = isAnti != null && isAnti.get(emptyFileCounter)\n      files[i].hasCrc = false\n      files[i].size = 0\n      ++emptyFileCounter\n    }\n  }\n  archive.files = files\n  calculateStreamMap(archive)\n}\n\nfunction calculateStreamMap(archive: Archive) {\n  const streamMap = new StreamMap()\n\n  let nextFolderPackStreamIndex = 0\n  const numFolders = archive.folders != null ? archive.folders.length : 0\n  for (let i = 0; i < numFolders; i++) {\n    const folder = archive.folders[i]\n    folder.firstPackedStreamIndex = nextFolderPackStreamIndex\n    nextFolderPackStreamIndex += folder.packedStreams.length\n  }\n\n  let nextPackStreamOffset = 0\n  const numPackSizes = archive.packedSizes != null ? archive.packedSizes.length : 0\n  streamMap.packStreamOffsets = new Array(numPackSizes)\n  for (let i = 0; i < numPackSizes; i++) {\n    streamMap.packStreamOffsets[i] = nextPackStreamOffset\n    nextPackStreamOffset += archive.packedSizes[i]\n  }\n\n  streamMap.folderFirstFileIndex = new Array(numFolders)\n  let nextFolderIndex = 0\n  let nextFolderUnpackStreamIndex = 0\n  for (let i = 0; i < archive.files.length; i++) {\n    const file = archive.files[i]\n    if (!file.hasStream && nextFolderUnpackStreamIndex === 0) {\n      file.blockIndex = -1\n      continue\n    }\n    if (nextFolderUnpackStreamIndex === 0) {\n      for (; nextFolderIndex < archive.folders.length; ++nextFolderIndex) {\n        streamMap.folderFirstFileIndex[nextFolderIndex] = i\n        const folder = archive.folders[nextFolderIndex]\n        if (folder.numUnpackSubStreams > 0) {\n          break\n        }\n      }\n      if (nextFolderIndex >= archive.folders.length) {\n        throw new Error(\"Too few folders in archive\")\n      }\n    }\n    file.blockIndex = nextFolderIndex\n    if (!file.hasStream) {\n      continue\n    }\n    ++nextFolderUnpackStreamIndex\n    if (nextFolderUnpackStreamIndex >= archive.folders[nextFolderIndex].numUnpackSubStreams) {\n      ++nextFolderIndex\n      nextFolderUnpackStreamIndex = 0\n    }\n  }\n\n  archive.streamMap = streamMap\n}\n\nfunction skipBytesFully(input: LittleEndianBuffer, bytesToSkip: number) {\n  if (bytesToSkip < 1) {\n    return 0\n  }\n  const maxSkip = input.remaining()\n  if (maxSkip < bytesToSkip) {\n    bytesToSkip = maxSkip\n  }\n  input.skip(bytesToSkip)\n  return bytesToSkip\n}\n\nfunction readArchiveProperties(input: LittleEndianBuffer) {\n  // just skip it\n  let nid = input.readUnsignedByte()\n  while (nid !== kEnd) {\n    input.skip(readUint64(input))\n    nid = input.readUnsignedByte()\n  }\n}\n\nfunction readStreamsInfo(header: LittleEndianBuffer, archive: Archive) {\n  let nid = header.readUnsignedByte()\n  if (nid === kPackInfo) {\n    readPackInfo(header, archive)\n    nid = header.readUnsignedByte()\n  }\n\n  if (nid === kUnpackInfo) {\n    readUnpackInfo(header, archive)\n    nid = header.readUnsignedByte()\n  }\n  else {\n    // archive without unpack/coders info\n    archive.folders = []\n  }\n\n  if (nid === kSubStreamsInfo) {\n    readSubStreamsInfo(header, archive)\n    nid = header.readUnsignedByte()\n  }\n\n  if (nid !== kEnd) {\n    throw new Error(\"Badly terminated StreamsInfo\")\n  }\n}\n\nfunction readSubStreamsInfo(header: LittleEndianBuffer, archive: Archive) {\n  for (const folder of archive.folders) {\n    folder.numUnpackSubStreams = 1\n  }\n\n  let totalUnpackStreams = archive.folders.length\n\n  let nid = header.readUnsignedByte()\n  if (nid === kNumUnpackStream) {\n    totalUnpackStreams = 0\n    for (const folder of archive.folders) {\n      const numStreams = readUint64(header)\n      folder.numUnpackSubStreams = numStreams\n      totalUnpackStreams += numStreams\n    }\n    nid = header.readUnsignedByte()\n  }\n\n  const subStreamsInfo = new SubStreamsInfo()\n  subStreamsInfo.unpackSizes = new Array(totalUnpackStreams)\n  subStreamsInfo.hasCrc = new BitSet(totalUnpackStreams)\n  subStreamsInfo.crcs = new Array(totalUnpackStreams)\n\n  let nextUnpackStream = 0\n  for (const folder of archive.folders) {\n    if (folder.numUnpackSubStreams === 0) {\n      continue\n    }\n    let sum = 0\n    if (nid === kSize) {\n      for (let i = 0; i < folder.numUnpackSubStreams - 1; i++) {\n        const size = readUint64(header)\n        subStreamsInfo.unpackSizes[nextUnpackStream++] = size\n        sum += size\n      }\n    }\n    subStreamsInfo.unpackSizes[nextUnpackStream++] = folder.getUnpackSize() - sum\n  }\n  if (nid === kSize) {\n    nid = header.readUnsignedByte()\n  }\n\n  let numDigests = 0\n  for (const folder of archive.folders) {\n    if (folder.numUnpackSubStreams !== 1 || !folder.hasCrc) {\n      numDigests += folder.numUnpackSubStreams\n    }\n  }\n\n  if (nid === kCRC) {\n    const hasMissingCrc = readAllOrBits(header, numDigests)\n    const missingCrcs = new Array<number>(numDigests)\n    for (let i = 0; i < numDigests; i++) {\n      if (hasMissingCrc.get(i)) {\n        missingCrcs[i] = header.readUnsignedInt()\n      }\n    }\n    let nextCrc = 0\n    let nextMissingCrc = 0\n    for (const folder of archive.folders) {\n      if (folder.numUnpackSubStreams === 1 && folder.hasCrc) {\n        subStreamsInfo.hasCrc.set(nextCrc)\n        subStreamsInfo.crcs[nextCrc] = folder.crc\n        ++nextCrc\n      }\n      else {\n        for (let i = 0; i < folder.numUnpackSubStreams; i++) {\n          if (hasMissingCrc.get(nextMissingCrc)) {\n            subStreamsInfo.hasCrc.set(nextCrc)\n          }\n          else {\n            subStreamsInfo.hasCrc.clear(nextCrc)\n          }\n          subStreamsInfo.crcs[nextCrc] = missingCrcs[nextMissingCrc]\n          ++nextCrc\n          ++nextMissingCrc\n        }\n      }\n    }\n\n    nid = header.readUnsignedByte()\n  }\n\n  if (nid !== kEnd) {\n    throw new Error(\"Badly terminated SubStreamsInfo\")\n  }\n\n  archive.subStreamsInfo = subStreamsInfo\n}\n\nfunction readUnpackInfo(header: LittleEndianBuffer, archive: Archive) {\n  let nid = header.readUnsignedByte()\n  if (nid !== kFolder) {\n    throw new Error(`Expected kFolder, got ${nid}`)\n  }\n\n  const numFolders = readUint64(header)\n  const folders = new Array<Folder>(numFolders)\n  archive.folders = folders\n  const external = header.readUnsignedByte()\n  if (external !== 0) {\n    throw new Error(\"External unsupported\")\n  }\n  for (let i = 0; i < numFolders; i++) {\n    folders[i] = readFolder(header)\n  }\n\n  nid = header.readUnsignedByte()\n  if (nid !== kCodersUnpackSize) {\n    throw new Error(`Expected kCodersUnpackSize, got ${nid}`)\n  }\n  for (const folder of folders) {\n    folder.unpackSizes = new Array(folder.totalOutputStreams)\n    for (let i = 0; i < folder.totalOutputStreams; i++) {\n      folder.unpackSizes[i] = readUint64(header)\n    }\n  }\n\n  nid = header.readUnsignedByte()\n  if (nid === kCRC) {\n    const crcsDefined = readAllOrBits(header, numFolders)\n    for (let i = 0; i < numFolders; i++) {\n      if (crcsDefined.get(i)) {\n        folders[i].hasCrc = true\n        folders[i].crc = 0xffffFFFF & header.readInt()\n      }\n      else {\n        folders[i].hasCrc = false\n      }\n    }\n\n    nid = header.readUnsignedByte()\n  }\n\n  if (nid !== kEnd) {\n    throw new Error(\"Badly terminated UnpackInfo\")\n  }\n}\n\nfunction readFolder(header: LittleEndianBuffer) {\n  const folder = new Folder()\n\n  const numCoders = readUint64(header)\n  const coders = new Array<Coder>(numCoders)\n  let totalInStreams = 0\n  let totalOutStreams = 0\n  for (let i = 0; i < coders.length; i++) {\n    coders[i] = new Coder()\n    const bits = header.readUnsignedByte()\n    const idSize = bits & 0xf\n    const isSimple = (bits & 0x10) === 0\n    const hasAttributes = (bits & 0x20) !== 0\n    const moreAlternativeMethods = (bits & 0x80) !== 0\n\n    coders[i].decompressionMethodId = Buffer.allocUnsafe(idSize)\n    header.get(coders[i].decompressionMethodId)\n    if (isSimple) {\n      coders[i].numInStreams = 1\n      coders[i].numOutStreams = 1\n    }\n    else {\n      coders[i].numInStreams = readUint64(header)\n      coders[i].numOutStreams = readUint64(header)\n    }\n    totalInStreams += coders[i].numInStreams\n    totalOutStreams += coders[i].numOutStreams\n    if (hasAttributes) {\n        const propertiesSize = readUint64(header)\n        coders[i].properties = Buffer.allocUnsafe(propertiesSize)\n        header.get(coders[i].properties)\n    }\n    // would need to keep looping as above:\n    // noinspection LoopStatementThatDoesntLoopJS\n    while (moreAlternativeMethods) {\n      throw new Error(\"Alternative methods are unsupported, please report. The reference implementation doesn't support them either.\")\n    }\n  }\n  folder.coders = coders\n  folder.totalInputStreams = totalInStreams\n  folder.totalOutputStreams = totalOutStreams\n\n  if (totalOutStreams === 0) {\n    throw new Error(\"Total output streams can't be 0\")\n  }\n  const numBindPairs = totalOutStreams - 1\n  const bindPairs = new Array<BindPair>(numBindPairs)\n  for (let i = 0; i < numBindPairs; i++) {\n    bindPairs[i] = new BindPair()\n    bindPairs[i].inIndex = readUint64(header)\n    bindPairs[i].outIndex = readUint64(header)\n  }\n  folder.bindPairs = bindPairs\n\n  if (totalInStreams < numBindPairs) {\n    throw new Error(\"Total input streams can't be less than the number of bind pairs\")\n  }\n\n  const numPackedStreams = totalInStreams - numBindPairs\n  const packedStreams = new Array<number>(numPackedStreams)\n  if (numPackedStreams === 1) {\n    let i\n    for (i = 0; i < totalInStreams; i++) {\n      if (folder.findBindPairForInStream(i) < 0) {\n        break\n      }\n    }\n    if (i === totalInStreams) {\n      throw new Error(\"Couldn't find stream's bind pair index\")\n    }\n    packedStreams[0] = i\n  }\n  else if (numPackedStreams > 1) {\n    for (let i = 0; i < numPackedStreams; i++) {\n      packedStreams[i] = readUint64(header)\n    }\n  }\n  folder.packedStreams = packedStreams\n\n  return folder\n}\n\nfunction readPackInfo(header: LittleEndianBuffer, archive: Archive) {\n  archive.packPosition = readUint64(header)\n\n  const numPackStreams = readUint64(header)\n  let nid = header.readUnsignedByte()\n  if (nid === kSize) {\n    archive.packedSizes = new Array(numPackStreams)\n    for (let i = 0; i < archive.packedSizes.length; i++) {\n      archive.packedSizes[i] = readUint64(header)\n    }\n    nid = header.readUnsignedByte()\n  }\n\n  if (nid === kCRC) {\n    // just read and ignore crc\n    const packedCrcsDefined = readAllOrBits(header, numPackStreams)\n    for (let i = 0; i < numPackStreams; i++) {\n      if (packedCrcsDefined.get(i)) {\n        header.skip(4)\n      }\n    }\n\n    nid = header.readUnsignedByte()\n  }\n\n  if (nid !== kEnd) {\n    throw new Error(`Badly terminated PackInfo (${nid})`)\n  }\n}\n\nfunction readAllOrBits(header: LittleEndianBuffer, size: number) {\n  const areAllDefined = header.readUnsignedByte()\n  let bits: BitSet\n  if (areAllDefined !== 0) {\n    bits = new BitSet(size)\n    for (let i = 0; i < size; i++) {\n      bits.set(i)\n    }\n  }\n  else {\n    bits = readBits(header, size)\n  }\n  return bits\n}\n\nfunction readBits(header: LittleEndianBuffer, size: number) {\n  const bits = new BitSet(size)\n  let mask = 0\n  let cache = 0\n  for (let i = 0; i < size; i++) {\n    if (mask === 0) {\n      mask = 0x80\n      cache = header.readUnsignedByte()\n    }\n    if ((cache & mask) !== 0) {\n      bits.set(i)\n    }\n    else {\n      bits.clear(i)\n    }\n    mask >>>= 1\n  }\n  return bits\n}\n\nfunction readUint64(input: LittleEndianBuffer) {\n  // long rather than int as it might get shifted beyond the range of an int\n  const firstByte = input.readUnsignedByte()\n  let mask = 0x80\n  let value = 0\n  for (let i = 0; i < 8; i++) {\n    if ((firstByte & mask) === 0) {\n      return value | ((firstByte & (mask - 1)) << (8 * i))\n    }\n    const nextByte = input.readUnsignedByte()\n    value |= nextByte << (8 * i)\n    mask >>>= 1\n  }\n  return value\n}\n\nexport class StartHeader {\n  // noinspection JSUnusedGlobalSymbols\n  constructor(readonly nextHeaderOffset: number, readonly nextHeaderSize: number, readonly nextHeaderCrc: number) {\n  }\n}\n\nexport class SubStreamsInfo {\n  unpackSizes: Array<number>\n  hasCrc: BitSet\n  crcs: Array<number>\n}"]}
