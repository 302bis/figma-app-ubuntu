{"version":3,"file":"Folder.js","sourceRoot":"","sources":["../src/Folder.ts"],"names":[],"mappings":";;;;;AAAA,AAKG,AACH,AAAM;;;;;;;AAcJ,AAAuB,4BAAC,AAAa;AACnC,cAAM,AAAS,YAAG,AAAI,KAAC,AAAS;AAChC,AAAG,AAAC,aAAC,IAAI,AAAC,IAAG,AAAC,GAAE,AAAC,IAAG,AAAS,UAAC,AAAM,QAAE,AAAC,AAAE,KAAE,AAAC;AAC1C,AAAE,AAAC,gBAAC,AAAS,UAAC,AAAC,AAAC,GAAC,AAAO,YAAK,AAAK,AAAC,OAAC,AAAC;AACnC,AAAM,uBAAC,AAAC,AACV;AAAC,AACH;AAAC;AACD,AAAM,eAAC,CAAC,AAAC,AACX;AAAC;AAED,AAAuB;AACvB,AAA+B;AAC/B,AAA8B;AAC9B,AAAwC;AACxC,AAA6B;AAC7B,AAAmC;AACnC,AAA0D;AAC1D,AAAgE;AAChE,AAAM;AACN,AAAa;AACb,AAAI;AAEI,AAAwB,6BAAC,AAAa;AAC5C,AAAG,AAAC,aAAC,IAAI,AAAC,IAAG,AAAC,GAAE,AAAC,IAAG,AAAI,KAAC,AAAS,UAAC,AAAM,QAAE,AAAC,AAAE,KAAE,AAAC;AAC/C,AAAE,AAAC,gBAAC,AAAI,KAAC,AAAS,UAAC,AAAC,AAAC,GAAC,AAAQ,aAAK,AAAK,AAAC,OAAC,AAAC;AACzC,AAAM,uBAAC,AAAC,AACV;AAAC,AACH;AAAC;AACD,AAAM,eAAC,CAAC,AAAC,AACX;AAAC;AAED,AAAwC;AACxC,AAA+B;AAC/B,AAAqD;AACrD,AAAwC;AACxC,AAAqC;AACrC,AAAU;AACV,AAAQ;AACR,AAAM;AACN,AAAa;AACb,AAAI;AAEJ,AAAa;AACX,AAAE,AAAC,YAAC,AAAI,KAAC,AAAkB,uBAAK,AAAC,AAAC,GAAC,AAAC;AAClC,AAAM,mBAAC,AAAC,AACV;AAAC;AACD,AAAG,AAAC,aAAC,IAAI,AAAC,IAAG,AAAI,KAAC,AAAkB,qBAAG,AAAC,GAAE,AAAC,KAAI,AAAC,GAAE,AAAC,AAAE,KAAE,AAAC;AACtD,AAAE,AAAC,gBAAC,AAAI,KAAC,AAAwB,yBAAC,AAAC,AAAC,KAAG,AAAC,AAAC,GAAC,AAAC;AACzC,AAAM,uBAAC,AAAI,KAAC,AAAW,YAAC,AAAC,AAAC,AAC5B;AAAC,AACH;AAAC;AACD,AAAM,eAAC,AAAC,AACV;AAAC;AAED,AAAa;AACX,AAAE,AAAC,YAAC,AAAI,KAAC,AAAiB,sBAAK,AAAC,AAAC,GAAC,AAAC;AACjC,AAAM,mBAAC,AAAC,AACV;AAAC;AAED,AAAG,AAAC,aAAC,IAAI,AAAC,IAAG,AAAI,KAAC,AAAiB,oBAAG,AAAC,GAAE,AAAC,KAAI,AAAC,GAAE,AAAC,AAAE,KAAE,AAAC;AACrD,AAAE,AAAC,gBAAC,AAAI,KAAC,AAAuB,wBAAC,AAAC,AAAC,KAAG,AAAC,AAAC,GAAC,AAAC;AACxC,AAAM,uBAAC,AAAI,KAAC,AAAW,YAAC,AAAC,AAAC,AAC5B;AAAC,AACH;AAAC;AACD,AAAM,eAAC,AAAC,AACV;AAAC,AACF,AAED,AAAM;;;;AAIJ,AAAQ;AACN,AAAM,AAAC,yCAA0B,AAAI,KAAC,AAAO,qBAAc,AAAI,KAAC,AAAQ,QAAE,AAC5E;AAAC,AACF,AAED,AAAM;;;YAKL","sourcesContent":["/**\n * We use not solid archive. Folder represent the packed stream. It means, that if we have 117 files (regular files, not directories), we will have 117 folders.\n *\n * Each folder has 1-n packed streams. Even for non-solid archive. For our purposes indices in the packedStreams is not required, only count of packed streams is important.\n * Because packed streams for folder located in series (grouped).\n */\nexport class Folder {\n  hasCrc: boolean\n  crc: number\n\n  totalInputStreams: number\n  totalOutputStreams: number\n\n  unpackSizes: Array<number>\n  coders: Array<Coder>\n  bindPairs: Array<BindPair>\n  packedStreams: Array<number>\n  numUnpackSubStreams: number\n  firstPackedStreamIndex: number\n\n  findBindPairForInStream(index: number) {\n    const bindPairs = this.bindPairs\n    for (let i = 0; i < bindPairs.length; i++) {\n      if (bindPairs[i].inIndex === index) {\n        return i\n      }\n    }\n    return -1\n  }\n\n  // getOrderedCoders() {\n  //   const l: Array<Coder> = []\n  //   // more that 2^31 coders?\n  //   let current = this.packedStreams[0]\n  //   while (current !== -1) {\n  //     l.push(this.coders[current])\n  //     const pair = this.findBindPairForOutStream(current)\n  //     current = pair !== -1 ? this.bindPairs[pair].inIndex : -1\n  //   }\n  //   return l\n  // }\n\n  private findBindPairForOutStream(index: number) {\n    for (let i = 0; i < this.bindPairs.length; i++) {\n      if (this.bindPairs[i].outIndex === index) {\n        return i\n      }\n    }\n    return -1\n  }\n\n  // getUnpackSizeForCoder(coder: Coder) {\n  //   if (this.coders != null) {\n  //     for (let i = 0; i < this.coders.length; i++) {\n  //       if (this.coders[i] === coder) {\n  //         return this.unpackSizes[i]\n  //       }\n  //     }\n  //   }\n  //   return 0\n  // }\n\n  getUnpackSize() {\n    if (this.totalOutputStreams === 0) {\n      return 0\n    }\n    for (let i = this.totalOutputStreams - 1; i >= 0; i--) {\n      if (this.findBindPairForOutStream(i) < 0) {\n        return this.unpackSizes[i]\n      }\n    }\n    return 0\n  }\n\n  getPackedSize() {\n    if (this.totalInputStreams === 0) {\n      return 0\n    }\n\n    for (let i = this.totalInputStreams - 1; i >= 0; i--) {\n      if (this.findBindPairForInStream(i) < 0) {\n        return this.unpackSizes[i]\n      }\n    }\n    return 0\n  }\n}\n\nexport class BindPair {\n  inIndex: number\n  outIndex: number\n\n  toString() {\n    return `BindPair binding input ${this.inIndex} to output ${this.outIndex}`\n  }\n}\n\nexport class Coder {\n  decompressionMethodId: Buffer\n  numInStreams: number\n  numOutStreams: number\n  properties: Buffer\n}"]}
