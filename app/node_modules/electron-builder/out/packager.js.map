{"version":3,"file":"packager.js","sourceRoot":"","sources":["../src/packager.ts"],"names":[],"mappings":"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","sourcesContent":["import BluebirdPromise from \"bluebird-lst\"\nimport { Arch, AsyncTaskManager, debug, DebugLogger, exec, log, safeStringifyJson, TmpDir, use, serializeToYaml, addValue, archFromString } from \"builder-util\"\nimport { CancellationToken } from \"builder-util-runtime\"\nimport { executeFinally, orNullIfFileNotExist } from \"builder-util/out/promise\"\nimport { EventEmitter } from \"events\"\nimport { ensureDir } from \"fs-extra-p\"\nimport { Lazy } from \"lazy-val\"\nimport * as path from \"path\"\nimport { deepAssign } from \"read-config-file/out/deepAssign\"\nimport { AppInfo } from \"./appInfo\"\nimport { readAsarJson } from \"./asar/asar\"\nimport { AfterPackContext, Configuration } from \"./configuration\"\nimport { Platform, SourceRepositoryInfo, Target } from \"./core\"\nimport MacPackager from \"./macPackager\"\nimport { Metadata } from \"./options/metadata\"\nimport { ArtifactCreated, PackagerOptions } from \"./packagerApi\"\nimport { PlatformPackager, resolveFunction } from \"./platformPackager\"\nimport { computeArchToTargetNamesMap, createTargets, NoOpTarget } from \"./targets/targetFactory\"\nimport { computeDefaultAppDirectory, getConfig, validateConfig } from \"./util/config\"\nimport { computeElectronVersion, getElectronVersionFromInstalled } from \"./util/electronVersion\"\nimport { createLazyProductionDeps, Dependency } from \"./util/packageDependencies\"\nimport { checkMetadata, readPackageJson } from \"./util/packageMetadata\"\nimport { getRepositoryInfo } from \"./util/repositoryInfo\"\nimport { getGypEnv, installOrRebuild } from \"./util/yarn\"\nimport { WinPackager } from \"./winPackager\"\n\nfunction addHandler(emitter: EventEmitter, event: string, handler: (...args: Array<any>) => void) {\n  emitter.on(event, handler)\n}\n\ndeclare const PACKAGE_VERSION: string\n\nexport class Packager {\n  readonly projectDir: string\n  appDir: string\n\n  metadata: Metadata\n\n  private _isPrepackedAppAsar: boolean\n\n  get isPrepackedAppAsar(): boolean {\n    return this._isPrepackedAppAsar\n  }\n\n  devMetadata: Metadata\n\n  private _configuration: Configuration\n\n  get config(): Configuration {\n    return this._configuration\n  }\n\n  isTwoPackageJsonProjectLayoutUsed = true\n\n  readonly eventEmitter = new EventEmitter()\n\n  appInfo: AppInfo\n\n  readonly tempDirManager = new TmpDir()\n\n  private _repositoryInfo = new Lazy<SourceRepositoryInfo | null>(() => getRepositoryInfo(this.projectDir, this.metadata, this.devMetadata))\n\n  private readonly afterPackHandlers: Array<(context: AfterPackContext) => Promise<any> | null> = []\n\n  readonly options: PackagerOptions\n\n  readonly debugLogger = new DebugLogger(debug.enabled)\n\n  get repositoryInfo(): Promise<SourceRepositoryInfo | null> {\n    return this._repositoryInfo.value\n  }\n\n  private _productionDeps: Lazy<Array<Dependency>> | null = null\n\n  get productionDeps(): Lazy<Array<Dependency>> {\n    let result = this._productionDeps\n    if (result == null) {\n      result = createLazyProductionDeps(this.appDir)\n      this._productionDeps = result\n    }\n    return result\n  }\n\n  //noinspection JSUnusedGlobalSymbols\n  constructor(options: PackagerOptions, readonly cancellationToken = new CancellationToken()) {\n    if (\"project\" in options) {\n      throw new Error(\"Use projectDir instead of project\")\n    }\n\n    if (\"devMetadata\" in options) {\n      throw new Error(\"devMetadata in the options is deprecated, please use config instead\")\n    }\n    if (\"extraMetadata\" in options) {\n      throw new Error(\"extraMetadata in the options is deprecated, please use config.extraMetadata instead\")\n    }\n\n    const targets = options.targets || new Map<Platform, Map<Arch, Array<string>>>()\n    if (options.targets == null) {\n      options.targets = targets\n    }\n\n    function processTargets(platform: Platform, types: Array<string>) {\n      function commonArch(currentIfNotSpecified: boolean): Array<Arch> {\n        if (platform === Platform.MAC) {\n          return currentIfNotSpecified ? [Arch.x64] : []\n        }\n\n        const result = Array<Arch>()\n        return result.length === 0 && currentIfNotSpecified ? [archFromString(process.arch)] : result\n      }\n\n      let archToType = targets.get(platform)\n      if (archToType == null) {\n        archToType = new Map<Arch, Array<string>>()\n        targets.set(platform, archToType)\n      }\n\n      if (types.length === 0) {\n        for (const arch of commonArch(false)) {\n          archToType.set(arch, [])\n        }\n        return\n      }\n\n      for (const type of types) {\n        const suffixPos = type.lastIndexOf(\":\")\n        if (suffixPos > 0) {\n          addValue(archToType, archFromString(type.substring(suffixPos + 1)), type.substring(0, suffixPos))\n        }\n        else {\n          for (const arch of commonArch(true)) {\n            addValue(archToType, arch, type)\n          }\n        }\n      }\n    }\n\n    if (options.mac != null) {\n      processTargets(Platform.MAC, options.mac)\n    }\n    if (options.linux != null) {\n      processTargets(Platform.LINUX, options.linux)\n    }\n    if (options.win != null) {\n      processTargets(Platform.WINDOWS, options.win)\n    }\n\n    this.projectDir = options.projectDir == null ? process.cwd() : path.resolve(options.projectDir)\n    this.options = {\n      ...options,\n      prepackaged: options.prepackaged == null ? null : path.resolve(this.projectDir, options.prepackaged)\n    }\n\n    try {\n      log(\"electron-builder \" + PACKAGE_VERSION)\n    }\n    catch (e) {\n      // error in dev mode without babel\n      if (!(e instanceof ReferenceError)) {\n        throw e\n      }\n    }\n  }\n\n  addAfterPackHandler(handler: (context: AfterPackContext) => Promise<any> | null) {\n    this.afterPackHandlers.push(handler)\n  }\n\n  artifactCreated(handler: (event: ArtifactCreated) => void): Packager {\n    addHandler(this.eventEmitter, \"artifactCreated\", handler)\n    return this\n  }\n\n  dispatchArtifactCreated(event: ArtifactCreated) {\n    this.eventEmitter.emit(\"artifactCreated\", event)\n  }\n\n  async build(): Promise<BuildResult> {\n    let configPath: string | null = null\n    let configFromOptions = this.options.config\n    if (typeof configFromOptions === \"string\") {\n      // it is a path to config file\n      configPath = configFromOptions\n      configFromOptions = null\n    }\n    else if (configFromOptions != null && configFromOptions.extends != null && configFromOptions.extends.includes(\".\")) {\n      configPath = configFromOptions.extends\n    }\n\n    const projectDir = this.projectDir\n\n    const devPackageFile = path.join(projectDir, \"package.json\")\n    this.devMetadata = await orNullIfFileNotExist(readPackageJson(devPackageFile))\n\n    const devMetadata = this.devMetadata\n    const config = await getConfig(projectDir, configPath, configFromOptions, new Lazy(() => BluebirdPromise.resolve(devMetadata)))\n    if (debug.enabled) {\n      debug(`Effective config:\\n${serializeToYaml(JSON.parse(safeStringifyJson(config)))}`)\n    }\n    await validateConfig(config, this.debugLogger)\n    this._configuration = config\n\n    this.appDir = await computeDefaultAppDirectory(projectDir, use(config.directories, it => it!.app))\n\n    this.isTwoPackageJsonProjectLayoutUsed = this.appDir !== projectDir\n\n    const appPackageFile = this.isTwoPackageJsonProjectLayoutUsed ? path.join(this.appDir, \"package.json\") : devPackageFile\n\n    const extraMetadata = config.extraMetadata\n    // tslint:disable:prefer-conditional-expression\n    if (devMetadata != null && !this.isTwoPackageJsonProjectLayoutUsed) {\n      this.metadata = devMetadata\n    }\n    else {\n      this.metadata = await this.readProjectMetadataIfTwoPackageStructureOrPrepacked(appPackageFile)\n    }\n    deepAssign(this.metadata, extraMetadata)\n\n    if (this.isTwoPackageJsonProjectLayoutUsed) {\n      debug(`Two package.json structure is used (dev: ${devPackageFile}, app: ${appPackageFile})`)\n    }\n\n    checkMetadata(this.metadata, devMetadata, appPackageFile, devPackageFile)\n\n    if (config.electronVersion == null) {\n      // for prepacked app asar no dev deps in the app.asar\n      if (this.isPrepackedAppAsar) {\n        config.electronVersion = await getElectronVersionFromInstalled(projectDir)\n        if (config.electronVersion == null) {\n          throw new Error(`Cannot compute electron version for prepacked asar`)\n        }\n      }\n      config.electronVersion = await computeElectronVersion(projectDir, new Lazy(() => BluebirdPromise.resolve(this.metadata)))\n    }\n    this.appInfo = new AppInfo(this)\n\n    const outDir = path.resolve(this.projectDir, use(this.config.directories, it => it!.output) || \"dist\")\n    return {\n      outDir,\n      platformToTargets: await executeFinally(this.doBuild(outDir), async () => {\n        if (this.debugLogger.enabled) {\n          await this.debugLogger.save(path.join(outDir, \"electron-builder-debug.yml\"))\n        }\n        await this.tempDirManager.cleanup()\n      })\n    }\n  }\n\n  private async readProjectMetadataIfTwoPackageStructureOrPrepacked(appPackageFile: string): Promise<Metadata> {\n    let data = await orNullIfFileNotExist(readPackageJson(appPackageFile))\n    if (data != null) {\n      return data\n    }\n\n    data = await orNullIfFileNotExist(readAsarJson(path.join(this.projectDir, \"app.asar\"), \"package.json\"))\n    if (data != null) {\n      this._isPrepackedAppAsar = true\n      return data\n    }\n\n    throw new Error(`Cannot find package.json in the ${path.dirname(appPackageFile)}`)\n  }\n\n  private async doBuild(outDir: string): Promise<Map<Platform, Map<string, Target>>> {\n    const taskManager = new AsyncTaskManager(this.cancellationToken)\n\n    const platformToTarget = new Map<Platform, Map<string, Target>>()\n    const createdOutDirs = new Set<string>()\n\n    for (const [platform, archToType] of this.options.targets!) {\n      if (this.cancellationToken.cancelled) {\n        break\n      }\n\n      if (platform === Platform.MAC && process.platform === Platform.WINDOWS.nodeName) {\n        throw new Error(\"Build for macOS is supported only on macOS, please see https://electron.build/multi-platform-build\")\n      }\n\n      const packager = this.createHelper(platform)\n      const nameToTarget: Map<string, Target> = new Map()\n      platformToTarget.set(platform, nameToTarget)\n\n      for (const [arch, targetNames] of computeArchToTargetNamesMap(archToType, packager.platformSpecificBuildOptions, platform)) {\n        if (this.cancellationToken.cancelled) {\n          break\n        }\n\n        await this.installAppDependencies(platform, arch)\n\n        if (this.cancellationToken.cancelled) {\n          break\n        }\n\n        const targetList = createTargets(nameToTarget, targetNames.length === 0 ? packager.defaultTarget : targetNames, outDir, packager)\n        const ourDirs = new Set<string>()\n        for (const target of targetList) {\n          if (target instanceof NoOpTarget) {\n            continue\n          }\n\n          const outDir = (target as Target).outDir\n          if (createdOutDirs.has(outDir)) {\n            ourDirs.add(outDir)\n          }\n        }\n\n        if (ourDirs.size > 0) {\n          await BluebirdPromise.map(Array.from(ourDirs).sort(), it => {\n            createdOutDirs.add(it)\n            return ensureDir(it)\n          })\n        }\n\n        await packager.pack(outDir, arch, targetList, taskManager)\n      }\n\n      if (this.cancellationToken.cancelled) {\n        break\n      }\n\n      for (const target of nameToTarget.values()) {\n        taskManager.addTask(target.finishBuild())\n      }\n    }\n\n    await taskManager.awaitTasks()\n    return platformToTarget\n  }\n\n  private createHelper(platform: Platform): PlatformPackager<any> {\n    if (this.options.platformPackagerFactory != null) {\n      return this.options.platformPackagerFactory!(this, platform)\n    }\n\n    switch (platform) {\n      case Platform.MAC:\n      {\n        const helperClass: typeof MacPackager = require(\"./macPackager\").default\n        return new helperClass(this)\n      }\n\n      case Platform.WINDOWS:\n      {\n        const helperClass: typeof WinPackager = require(\"./winPackager\").WinPackager\n        return new helperClass(this)\n      }\n\n      case Platform.LINUX:\n        return new (require(\"./linuxPackager\").LinuxPackager)(this)\n\n      default:\n        throw new Error(`Unknown platform: ${platform}`)\n    }\n  }\n\n  private async installAppDependencies(platform: Platform, arch: Arch): Promise<any> {\n    if (this.options.prepackaged != null) {\n      return\n    }\n\n    const frameworkInfo = {version: this.config.muonVersion || this.config.electronVersion!, useCustomDist: this.config.muonVersion == null}\n    const config = this.config\n    if (config.nodeGypRebuild === true) {\n      log(`Executing node-gyp rebuild for arch ${Arch[arch]}`)\n      await exec(process.platform === \"win32\" ? \"node-gyp.cmd\" : \"node-gyp\", [\"rebuild\"], {\n        env: getGypEnv(frameworkInfo, platform.nodeName, Arch[arch], true),\n      })\n    }\n\n    if (config.npmRebuild === false) {\n      log(\"Skip app dependencies rebuild because npmRebuild is set to false\")\n      return\n    }\n\n    const beforeBuild = resolveFunction(config.beforeBuild)\n    if (beforeBuild != null) {\n      const performDependenciesInstallOrRebuild = await beforeBuild({\n        appDir: this.appDir,\n        electronVersion: this.config.electronVersion!,\n        platform,\n        arch: Arch[arch]\n      })\n      if (!performDependenciesInstallOrRebuild) {\n        return\n      }\n    }\n\n    if (config.buildDependenciesFromSource === true && platform.nodeName !== process.platform) {\n      log(\"Skip app dependencies rebuild because platform is different and buildDependenciesFromSource is set to true\")\n    }\n    else {\n      await installOrRebuild(config, this.appDir, {\n        frameworkInfo,\n        platform: platform.nodeName,\n        arch: Arch[arch],\n        productionDeps: this.productionDeps,\n      })\n    }\n  }\n\n  afterPack(context: AfterPackContext): Promise<any> {\n    const afterPack = resolveFunction(this.config.afterPack)\n    const handlers = this.afterPackHandlers.slice()\n    if (afterPack != null) {\n      // user handler should be last\n      handlers.push(afterPack)\n    }\n    return BluebirdPromise.each(handlers, it => it(context))\n  }\n}\n\nexport function normalizePlatforms(rawPlatforms: Array<string | Platform> | string | Platform | null | undefined): Array<Platform> {\n  const platforms = rawPlatforms == null || Array.isArray(rawPlatforms) ? (rawPlatforms as Array<string | Platform | null | undefined>) : [rawPlatforms]\n  if (platforms as any == null || platforms.length === 0) {\n    return [Platform.fromString(process.platform)]\n  }\n  else if (platforms[0] === \"all\") {\n    if (process.platform === Platform.MAC.nodeName) {\n      return [Platform.MAC, Platform.LINUX, Platform.WINDOWS]\n    }\n    else if (process.platform === Platform.LINUX.nodeName) {\n      // macOS code sign works only on macOS\n      return [Platform.LINUX, Platform.WINDOWS]\n    }\n    else {\n      return [Platform.WINDOWS]\n    }\n  }\n  else {\n    return platforms.map(it => it instanceof Platform ? it : Platform.fromString(it!))\n  }\n}\n\nexport interface BuildResult {\n  readonly outDir: string\n  readonly platformToTargets: Map<Platform, Map<string, Target>>\n}"]}
