{"version":3,"file":"macPackager.js","sourceRoot":"","sources":["../src/macPackager.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AACA,AAAO,AAAE,AAAI,AAAoB,AAAI,AAAE,AAAG,AAAE,AAAI,AAAE,AAAI,AAAE,AAAM,AAAc;;;;;;AAC5E,AAAO,AAAE,AAAS,AAAe,AAAM,AAAmB;;;;;;AAC1D,AAAO,AAAE,AAAS,AAAE,AAAM,AAAY;;;;AACtC,AAAO,AAAK,AAAI,AAAM,AAAM;;;;AAC5B,AAAO,AAAE,AAAU,AAAE,AAAM,AAAiC;;;;;;AAC5D,AAAO,AAAE,AAAO,AAAE,AAAM,AAAW;;;;;;AACnC,AAAO,AAAE,AAAwB,AAA6B,AAAc,AAAE,AAAY,AAAY,AAAa,AAAE,AAAW,AAAE,AAAM,AAAY;;;;;;AACpJ,AAAO,AAAE,AAAU,AAAE,AAAQ,AAAU,AAAM,AAAQ;;;;;;AAGrD,AAAO,AAAE,AAAgB,AAAE,AAAM,AAAoB;;;;;;AACrD,AAAO,AAAE,AAAS,AAAE,AAAM,AAAe;;;;;;AACzC,AAAO,AAAE,AAAS,AAAE,AAAuB,AAAE,AAAM,AAAe;;;;;;AAClE,AAAO,AAAE,AAAkB,AAAE,AAAU,AAAE,AAAM,AAAyB;;;;;;AACxE,AAAO,AAAE,AAAa,AAAE,AAAM,AAAyB;;;;;;AACvD,AAAO,AAAK,AAAM,AAAM,AAAQ,AAEhC,AAAM,AAAC,AAAO;;;;;;;;MAAmB,AAAQ,AAAkC;AAGzE,gBAAY,AAAc;AACxB,AAAK,cAAC,AAAI,AAAC;AAEX,AAAE,AAAC,YAAC,AAAI,KAAC,AAAe,gBAAC,AAAO,WAAI,AAAI,QAAI,AAAO,QAAC,AAAQ,aAAK,AAAQ,AAAC,UAAC,AAAC;AAC1E,AAAI,iBAAC,AAAe,kBAAG,AAAe,gDAAC,AAAO,QAAC,EAAC,AAAY,cAAE,AAAO,QAAC,AAAG,IAAC,AAAY,gBAAI,AAAI,AAAC,AAAC,AAClG;AAAC,AACD,AAAI,eAAC,AAAC;AACJ,AAAI,iBAAC,AAAe;AAClB,AAAM,wBAAE,AAAI,KAAC,AAAc;AAC3B,AAAO,yBAAE,AAAI,KAAC,AAAe,gBAAC,AAAQ;AACtC,AAAc,gCAAE,AAAI,KAAC,AAAc,AAAE;AACrC,AAAQ,0BAAE,AAAI,KAAC,AAAe,gBAAC,AAAgB;AAC/C,AAAe,iCAAE,AAAI,KAAC,AAAe,gBAAC,AAAuB;AAC7D,AAAU,4BAAE,AAAI,KAAC,AAAU,AAC5B,AAAC,AACJ;AARwC,aAAf,AAAc;AAQtC,AACH;AAAC;AAED,QAAI,AAAa;AACf,cAAM,AAA4B,+BAAG,AAAI,KAAC,AAA4B,6BAAC,AAA4B;AACnG,AAAM,eAAE,AAA4B,gCAAI,AAAI,QAAI,AAAM,4BAAC,AAAS,UAAC,AAAQ,UAAE,AAA4B,AAAC,AAAC,AAAC,AAAC,6BAApG,GAAqG,CAAC,AAAK,OAAE,AAAK,AAAC,AAAC,AAAC,SAAC,CAAC,AAAK,AAAC,AACtI;AAAC;AAES,AAAc,mBAAC,AAAgB;AACvC,AAAM,eAAC,AAAI,AAAO,0CAAC,AAAI,KAAC,AAAI,MAAE,AAAI,KAAC,AAA4B,6BAAC,AAAa,AAAC,AAChF;AAAC;AAEK,AAAW,eAAjB,AAAK;;;;AACH,gBAAI,AAAQ,WAAG,AAAI,MAAC,AAA4B,6BAAC,AAAI,QAAI,AAAI,MAAC,AAAM,OAAC,AAAI;AACzE,AAAE,AAAC,gBAAC,AAAQ,YAAI,AAAI,QAAI,CAAC,AAAQ,SAAC,AAAQ,SAAC,AAAO,AAAC,AAAC,UAAC,AAAC;AACpD,AAAQ,4BAAI,AAAO,AACrB;AAAC;AACD,AAAM,mBAAC,AAAQ,YAAI,AAAI,AAAC,AAAC,OAAC,MAAM,AAAI,MAAC,AAAc,eAAC,AAAM,AAAC,AAAC,AAAC,UAAC,MAAM,AAAI,MAAC,AAAW,YAAC,AAAQ,AAAC,AAChG;;AAAC;AAED,AAAa,kBAAC,AAAsB,SAAE,AAAmE;AACvG,AAAG,AAAC,aAAC,MAAM,AAAI,QAAI,AAAO,AAAC,SAAC,AAAC;AAC3B,AAAM,AAAC,oBAAC,AAAI,AAAC,AAAC,AAAC;AACb,AAAK,AAAU;AACb,AAAK;AAEP,qBAAK,AAAK;AACR,AAAM,2BAAC,AAAI,MAAE,AAAM,AAAC,AAAE,UAAC,AAAI,AAAS,oCAAC,AAAI,MAAE,AAAM,AAAC,AAAC;AACnD,AAAK;AAEP,qBAAK,AAAK;AACR,0BAAM,AAA4B,+BAAG,AAAI,KAAC,AAA4B,6BAAC,AAA4B;AACnG,AAAM,2BAAC,AAAI,MAAE,AAAM,AAAC,AAAE,UAAC,AAAI,AAAa,4DAAC,AAAI,MAAE,AAAM,QAAE,AAAI,MAAE,AAAO,QAAC,AAAI,KAAC,AAAE,AAAC,AAAE,MAAC,AAAE,OAAK,AAAK,AAAC,AAAI,WAAC,AAA4B,gCAAI,AAAI,QAAI,AAAM,4BAAC,AAAS,UAAC,AAAQ,UAAE,AAA4B,AAAC,AAAC,AAAC,AAAC;AACrM,AAAK;AAEP,qBAAK,AAAK;AACR,AAAM,2BAAC,AAAI,MAAE,AAAM,AAAC,AAAE,UAAC,AAAI,AAAS,oCAAC,AAAI,MAAE,AAAM,AAAC,AAAC;AACnD,AAAK;AAEP;AACE,AAAM,2BAAC,AAAI,MAAE,AAAM,AAAC,AAAE,UAAC,AAAI,SAAK,AAAK,SAAI,AAAI,SAAK,AAAS,AAAC,AAAC,YAAC,AAAI,AAAU,yDAAC,AAAI,AAAC,AAAC,AAAC,QAAC,AAAkB,kEAAC,AAAI,MAAE,AAAM,QAAE,AAAI,AAAC,AAAC;AAC5H,AAAK,AACT,AAAC,AACH;;AAAC,AACH;AAAC;AAED,QAAI,AAAQ;AACV,AAAM,eAAC,AAAQ,iCAAC,AAAG,AACrB;AAAC;AAEK,AAAI,QAAV,AAAK,CAAM,AAAc,QAAE,AAAU,MAAE,AAAsB,SAAE,AAA6B;;;;AAC1F,gBAAI,AAAa,gBAAwB,AAAI;AAE7C,kBAAM,AAAM,SAAG,AAAO,QAAC,AAAM,WAAK,AAAC,aAAY,AAAI;AAAC,AAAE,AAAC,AAAE,uBAAC,AAAE,GAAC,AAAI,SAAK,AAAK,SAAI,AAAE,GAAC,AAAI,SAAK,AAAS,AAAC;aAA9D,AAAO;AAC9C,kBAAM,AAAW,cAAG,AAAI,OAAC,AAAe,gBAAC,AAAW;AAEpD,AAAE,AAAC,gBAAC,CAAC,AAAM,UAAI,AAAO,QAAC,AAAM,SAAG,AAAC,AAAC,GAAC,AAAC;AAClC,sBAAM,AAAO,UAAG,AAAW,eAAI,AAAI,AAAC,AAAC,OAAC,AAAI,MAAC,AAAI,KAAC,AAAI,OAAC,AAAgB,iBAAC,AAAM,QAAE,AAAI,AAAC,AAAE,UAAG,AAAI,OAAC,AAAO,QAAC,AAAe,eAAM,AAAC,AAAC,AAAC,UAAC,AAAW;AACzI,AAAa,iCAAI,AAAW,AAAC,AAAC,cAAC,AAAe,gDAAC,AAAO,AAAE,AAAC,AAAC,YAAC,AAAI,OAAC,AAAM,OAAC,AAAM,QAAE,AAAI,MAAC,AAAO,QAAC,AAAO,AAAC,UAAE,AAAI,OAAC,AAAQ,SAAC,AAAQ,UAAE,AAAI,MAAE,AAAI,OAAC,AAA4B,8BAAE,AAAO,AAAC,AAAC,UAC7K,AAAI;AAAC,AAAG,AAAE,2BAAC,AAAI,OAAC,AAAI,KAAC,AAAO,SAAE,AAAI,MAAE,AAAI,AAAC,AAAC;iBAD7B,EAEb,AAAI;AAAC,AAAG,AAAE,2BAAC,AAAI,OAAC,AAA4B,6BAAC,AAAO,SAAE,AAAI,2CAAC,AAAG,KAAE,AAAO,SAAE,AAAW,AAAC,AAAC,AAC3F;;AAAC;AAED,AAAG,AAAC,iBAAC,MAAM,AAAM,UAAI,AAAO,AAAC,SAAC,AAAC;AAC7B,sBAAM,AAAU,aAAG,AAAM,OAAC,AAAI;AAC9B,AAAE,AAAC,oBAAC,AAAC,EAAC,AAAU,eAAK,AAAK,SAAI,AAAU,eAAK,AAAS,AAAC,AAAC,YAAC,AAAC;AACxD,AAAQ,AACV;AAAC;AAED,sBAAM,AAAe,kBAAG,AAAU,oDAAC,AAAE,IAAE,AAAI,OAAC,AAA4B,8BAAG,AAAI,OAAC,AAAc,OAAC,AAAG,AAAC;AACnG,AAAE,AAAC,oBAAC,AAAU,eAAK,AAAS,AAAC,WAAC,AAAC;AAC7B,AAAU,wEAAC,AAAe,iBAAG,AAAI,OAAC,AAAc,OAAC,AAAU,AAAC;AAC1D,AAAI,8BAAE,AAAa,AACpB,AAAC,AACJ;AAHgE;AAG/D;AAED,sBAAM,AAAY,eAAG,AAAI,MAAC,AAAI,KAAC,AAAM,QAAE,AAAU,AAAC;AAClD,AAAE,AAAC,oBAAC,AAAW,eAAI,AAAI,AAAC,MAAC,AAAC;AACxB,0BAAM,AAAI,OAAC,AAAM,OAAC,AAAM,QAAE,AAAY,cAAE,AAAK,OAAE,AAAI,MAAE,AAAe,iBAAE,CAAC,AAAM,AAAC,AAAC;AAC/E,0BAAM,AAAI,OAAC,AAAI,KAAC,AAAI,MAAC,AAAI,KAAC,AAAY,AAAE,iBAAG,AAAI,OAAC,AAAO,QAAC,AAAe,eAAM,AAAC,SAAE,AAAY,cAAE,AAAe,AAAC,AAChH;AAAC,AACD,AAAI,uBAAC,AAAC;AACJ,0BAAM,AAAI,OAAC,AAAI,KAAC,AAAW,aAAE,AAAY,cAAE,AAAe,AAAC,AAC7D;AAAC,AACH;AAAC;AAED,AAAE,AAAC,gBAAC,AAAa,iBAAI,AAAI,AAAC,MAAC,AAAC;AAC1B,sBAAM,AAAa,AACrB;AAAC,AACH;;AAAC;AAEa,AAAI,QAAV,AAAK,CAAM,AAAe,SAAE,AAAqB,QAAE,AAAmC;;;;AAC5F,AAAE,AAAC,gBAAC,CAAC,AAAa,AAAE,AAAC,sDAAC,AAAC;AACrB,AAAM,AACR;AAAC;AAED,kBAAM,AAAK,QAAG,AAAU,cAAI,AAAI;AAChC,kBAAM,AAAU,aAAG,AAAI,OAAC,AAA4B;AACpD,kBAAM,AAAS,YAAG,CAAC,AAAK,AAAC,AAAC,QAAC,AAAW,WAAC,AAAQ,AAAC,AAAC,WAAC,AAAI,AAAC,SAAI,AAAU,WAAC,AAAQ;AAE9E,AAAE,AAAC,gBAAC,CAAC,AAAK,SAAI,AAAS,cAAK,AAAI,AAAC,MAAC,AAAC;AACjC,AAAE,AAAC,oBAAC,AAAI,OAAC,AAAgB,AAAC,kBAAC,AAAC;AAC1B,0BAAM,IAAI,AAAK,MAAC,AAAyE,AAAC,AAC5F;AAAC;AACD,AAAG,+DAAC,AAA8E,AAAC;AACnF,AAAM,AACR;AAAC;AAED,kBAAM,AAAY,eAAG,CAAC,MAAM,AAAI,OAAC,AAAe,AAAC,iBAAC,AAAY;AAC9D,kBAAM,AAAY,eAAG,AAAK,AAAC,AAAC,QAAC,AAAW,WAAC,AAAI,AAAC,AAAC,OAAC,AAAU,WAAC,AAAI;AAC/D,kBAAM,AAAI,OAAG,AAAY,gBAAI,AAAc;AAC3C,kBAAM,AAAa,gBAAG,AAAI,SAAK,AAAa;AAC5C,kBAAM,AAAe,kBAAG,AAAkB,mBAAC,AAAK,OAAE,AAAa,AAAC;AAChE,gBAAI,AAAQ,WAAG,MAAM,AAAY,kDAAC,AAAe,iBAAE,AAAS,WAAE,AAAY,AAAC;AAC3E,AAAE,AAAC,gBAAC,AAAQ,YAAI,AAAI,AAAC,MAAC,AAAC;AACrB,AAAE,AAAC,oBAAC,CAAC,AAAK,SAAI,CAAC,AAAa,iBAAI,AAAY,iBAAK,AAAc,AAAC,gBAAC,AAAC;AAChE,AAAQ,+BAAG,MAAM,AAAY,kDAAC,AAAe,iBAAE,AAAS,WAAE,AAAY,AAAC;AACvE,AAAE,AAAC,wBAAC,AAAQ,YAAI,AAAI,AAAC,MAAC,AAAC;AACrB,AAAI,wEAAC,AAAgG,AAAC,AACxG;AAAC,AACH;AAAC;AAED,AAAE,AAAC,oBAAC,AAAQ,YAAI,AAAI,AAAC,MAAC,AAAC;AACrB,0BAAM,AAAW,iDAAC,AAAK,OAAE,AAAe,iBAAE,AAAS,WAAE,AAAY,cAAE,AAAI,OAAC,AAAgB,AAAC;AACzF,AAAM,AACR;AAAC,AACH;AAAC;AAED,kBAAM,AAAW;AACf,AAAqB,uCAAE,AAAK;AAC5B,AAAoE;AACpE,AAA+I;AAC/I,AAAM,wBAAE,UAAC,AAAY,AAAE,AAAE;AACvB,AAAM,2BAAC,AAAI,KAAC,AAAQ,SAAC,AAAO,AAAC,YAAI,AAAI,KAAC,AAAU,WAAC,AAAmB,qBAAE,AAAO,QAAC,AAAM,AAAC;AACnF,AAAoE;AACpE,AAAI,yBAAC,AAAQ,SAAC,AAAyC,AAAC,AAC5D;AAAC;AACD,AAAQ,0BAAE,AAAS;AACnB,AAAI;AACJ,AAAQ,0BAAE,AAAK,AAAC,AAAC,QAAC,AAAK,AAAC,AAAC,QAAC,AAAQ;AAClC,AAAO,yBAAE,AAAI,OAAC,AAAM,OAAC,AAAe;AACpC,AAAG,qBAAE,AAAO;AACZ,AAAQ,0BAAE,AAAY,gBAAI,AAAS;AACnC,AAAQ,0BAAG,CAAC,AAAK,SAAI,AAAU,cAAI,AAAI,AAAC,AAAC,OAAC,AAAU,WAAC,AAAQ,AAAC,AAAC,WAAC,AAAU,WAAC,AAAQ,AAAC,aAAI,AAAS;AACjG,AAAY,8BAAE,AAAK,SAAI,AAAU,WAAC,AAAY,gBAAI,AAAI,AAAC,AAAC,OAAC,AAAS,AAAC,AAAC,YAAC,MAAM,AAAI,OAAC,AAAW,YAAC,AAAU,WAAC,AAAY,AAAC;AACpH,AAAmB,8FAA2B,AAAI;AAAC,AAAE,AAAC,AAAE,2BAAC,AAAS,SAAC,AAAI,KAAC,AAAU,WAAC,AAAE,AAAC,AAAC;iBAAlE,AAAwB,KAA8C,AAAI,AAChG;AAlBwB;AAoBzB,kBAAM,AAAI,OAAC,AAAiB,kBAAC,AAAW,aAAE,AAAU,AAAC;AACrD,kBAAM,AAAI,AAAC,0EAA0B,AAAQ,SAAC,AAAI,QAAI,AAAQ,SAAC,AAAI,IAAG,KAAE,AAAI,OAAC,AAAM,OAAC,AAAW,AAAC,AAAC;AAEjG,AAA2F;AAC3F,AAAE,AAAC,gBAAC,AAAU,cAAI,AAAI,QAAI,CAAC,AAAa,AAAC,eAAC,AAAC;AACzC,sBAAM,AAAQ,WAAG,AAAa,AAAC,AAAC,gBAAC,AAAe,AAAC,AAAC,kBAAC,AAAmC;AACtF,sBAAM,AAAoB,uBAAG,MAAM,AAAY,kDAAC,AAAQ,UAAE,AAAU,WAAC,AAAQ,UAAE,AAAY,AAAC;AAC5F,AAAE,AAAC,oBAAC,AAAoB,wBAAI,AAAI,AAAC,MAAC,AAAC;AACjC,0BAAM,IAAI,AAAK,AAAC,4BAAsB,AAAQ,QAAkF,AAAC,AACnI;AAAC;AAED,sBAAM,AAAY,eAAG,AAAI,OAAC,AAAyB,0BAAC,AAAU,YAAE,AAAK,AAAC;AACtE,sBAAM,AAAY,eAAG,AAAI,MAAC,AAAI,KAAC,AAAO,QAAE,AAAY,AAAC;AACrD,sBAAM,AAAI,OAAC,AAAM,OAAC,AAAO,SAAE,AAAY,cAAE,AAAoB,sBAAE,AAAY,AAAC;AAC5E,AAAI,uBAAC,AAAuB,wBAAC,AAAY,cAAE,AAAI,MAAE,AAAI,2CAAC,AAAG,KAAE,AAAI,OAAC,AAAuB,wBAAC,AAAY,cAAE,AAAK,AAAC,AAAC,AAC/G;AAAC,AACH;;AAAC;AAEa,AAAiB,qBAAvB,AAAK,CAAmB,AAAgB,aAAE,AAAmC;;;;AACnF,kBAAM,AAAY,eAAG,MAAM,AAAI,OAAC,AAAY;AAC5C,AAAE,AAAC,gBAAC,AAAY,aAAC,AAAQ,AAAC,SAAwB,AAAC,AAAC,2BAAC,AAAC;AACpD,sBAAM,IAAI,AAAK,MAAC,AAA8E,AAAC,AACjG;AAAC;AACD,AAAE,AAAC,gBAAC,AAAY,aAAC,AAAQ,AAAC,SAAgC,AAAC,AAAC,mCAAC,AAAC;AAC5D,sBAAM,IAAI,AAAK,MAAC,AAA8F,AAAC,AACjH;AAAC;AAED,kBAAM,AAAiB,oBAAG,AAAU,cAAI,AAAI,OAAC,AAA4B;AACzE,kBAAM,AAAkB,qBAAG,AAAU,cAAI,AAAI,AAAC,AAAC,OAAC,AAAK,AAAC,AAAC,QAAC,AAAK;AAC7D,AAAE,AAAC,gBAAC,AAAiB,kBAAC,AAAY,gBAAI,AAAI,AAAC,MAAC,AAAC;AAC3C,sBAAM,AAAC,AAAG,oBAAgB,AAAkB,kBAAQ;AACpD,AAAE,AAAC,oBAAC,AAAY,aAAC,AAAQ,SAAC,AAAC,AAAC,AAAC,IAAC,AAAC;AAC7B,AAAW,gCAAC,AAAY,eAAG,AAAI,MAAC,AAAI,KAAC,AAAI,OAAC,AAAiB,mBAAE,AAAC,AAAC,AACjE;AAAC,AACH;AAAC,AACD,AAAI,mBAAC,AAAC;AACJ,AAAW,4BAAC,AAAY,eAAG,AAAiB,kBAAC,AAAY,AAC3D;AAAC;AAED,AAAE,AAAC,gBAAC,AAAiB,kBAAC,AAAmB,uBAAI,AAAI,AAAC,MAAC,AAAC;AAClD,sBAAM,AAAC,AAAG,oBAAgB,AAAkB,kBAAgB;AAC5D,AAAE,AAAC,oBAAC,AAAY,aAAC,AAAQ,SAAC,AAAC,AAAC,AAAC,IAAC,AAAC;AAC7B,AAAW,gCAAC,AAAsB,AAAC,0BAAG,AAAI,MAAC,AAAI,KAAC,AAAI,OAAC,AAAiB,mBAAE,AAAC,AAAC,AAC5E;AAAC,AACH;AAAC,AACD,AAAI,mBAAC,AAAC;AACJ,AAAW,4BAAC,AAAsB,AAAC,0BAAG,AAAiB,kBAAC,AAAmB,AAC7E;AAAC,AACH;;AAAC;AAED,AAAkC;AAClB,AAAM,UAAZ,AAAK,CAAQ,AAAiB;;AACtC,AAAM,mBAAC,AAAS,6DAAC,AAAI,AAAC,AACxB;;AAAC;AAED,AAAkC;AAClB,AAAM,UAAZ,AAAK,CAAQ,AAAe,SAAE,AAAe,SAAE,AAAkB,UAAE,AAAmC;;AAC9G,AAAsD;AACtD,kBAAM,AAAS,+CAAC,AAAI,MAAC,AAAO,QAAC,AAAO,AAAC,AAAC;AAEtC,kBAAM,AAAI,OAAG,AAAuB,mDAAC,AAAQ,UAAE,AAAQ,AAAC;AACxD,AAAI,iBAAC,AAAI,KAAC,AAAa,eAAE,AAAO,SAAE,AAAe,AAAC;AAClD,AAAI,iBAAC,AAAI,KAAC,AAAO,AAAC;AAClB,AAAM,mBAAC,MAAM,AAAI,gDAAC,AAAc,gBAAE,AAAI,AAAC,AACzC;;AAAC;AAEM,AAAiB,sBAAC,AAAY;AACnC,AAAM,eAAC,AAAI,MAAC,AAAO,QAAC,AAAI,KAAC,AAAU,YAAE,AAAI,MAAE,AAAI,KAAC,AAAwB,AAAC,AAC3E;AAAC;AAEM,AAAyB,8BAAC,AAAiB;AAChD,AAAM,eAAC,AAAI,MAAC,AAAI,KAAC,AAAS,WAAE,AAAI,KAAC,AAAwB,AAAC,AAC5D;AAAC,AACF;;;AAED,4BAA4B,AAAc,OAAE,AAAsB;AAChE,AAAE,AAAC,QAAC,AAAa,AAAC,eAAC,AAAC;AAClB,AAAM,eAAC,AAAe,AACxB;AAAC;AACD,AAAM,WAAC,AAAK,AAAC,AAAC,QAAC,AAAqC,AAAC,AAAC,wCAAC,AAA0B,AACnF;AAAC","sourcesContent":["import BluebirdPromise from \"bluebird-lst\"\nimport { Arch, AsyncTaskManager, exec, log, task, warn } from \"builder-util\"\nimport { signAsync, SignOptions } from \"electron-osx-sign\"\nimport { ensureDir } from \"fs-extra-p\"\nimport * as path from \"path\"\nimport { deepAssign } from \"read-config-file/out/deepAssign\"\nimport { AppInfo } from \"./appInfo\"\nimport { appleCertificatePrefixes, CertType, CodeSigningInfo, createKeychain, findIdentity, Identity, isSignAllowed, reportError } from \"./codeSign\"\nimport { DIR_TARGET, Platform, Target } from \"./core\"\nimport { MacConfiguration, MasConfiguration } from \"./options/macOptions\"\nimport { Packager } from \"./packager\"\nimport { PlatformPackager } from \"./platformPackager\"\nimport { DmgTarget } from \"./targets/dmg\"\nimport { PkgTarget, prepareProductBuildArgs } from \"./targets/pkg\"\nimport { createCommonTarget, NoOpTarget } from \"./targets/targetFactory\"\nimport { ArchiveTarget } from \"./targets/ArchiveTarget\"\nimport * as semver from \"semver\"\n\nexport default class MacPackager extends PlatformPackager<MacConfiguration> {\n  readonly codeSigningInfo: Promise<CodeSigningInfo>\n\n  constructor(info: Packager) {\n    super(info)\n\n    if (this.packagerOptions.cscLink == null || process.platform !== \"darwin\") {\n      this.codeSigningInfo = BluebirdPromise.resolve({keychainName: process.env.CSC_KEYCHAIN || null})\n    }\n    else {\n      this.codeSigningInfo = createKeychain({\n        tmpDir: info.tempDirManager,\n        cscLink: this.packagerOptions.cscLink!,\n        cscKeyPassword: this.getCscPassword(),\n        cscILink: this.packagerOptions.cscInstallerLink,\n        cscIKeyPassword: this.packagerOptions.cscInstallerKeyPassword,\n        currentDir: this.projectDir\n      })\n    }\n  }\n\n  get defaultTarget(): Array<string> {\n    const electronUpdaterCompatibility = this.platformSpecificBuildOptions.electronUpdaterCompatibility\n    return (electronUpdaterCompatibility == null || semver.satisfies(\"2.16.0\", electronUpdaterCompatibility)) ? [\"zip\", \"dmg\"] : [\"dmg\"]\n  }\n\n  protected prepareAppInfo(appInfo: AppInfo): AppInfo {\n    return new AppInfo(this.info, this.platformSpecificBuildOptions.bundleVersion)\n  }\n\n  async getIconPath(): Promise<string | null> {\n    let iconPath = this.platformSpecificBuildOptions.icon || this.config.icon\n    if (iconPath != null && !iconPath.endsWith(\".icns\")) {\n      iconPath += \".icns\"\n    }\n    return iconPath == null ? await this.getDefaultIcon(\"icns\") : await this.getResource(iconPath)\n  }\n\n  createTargets(targets: Array<string>, mapper: (name: string, factory: (outDir: string) => Target) => void): void {\n    for (const name of targets) {\n      switch (name) {\n        case DIR_TARGET:\n          break\n\n        case \"dmg\":\n          mapper(name, outDir => new DmgTarget(this, outDir))\n          break\n\n        case \"zip\":\n          const electronUpdaterCompatibility = this.platformSpecificBuildOptions.electronUpdaterCompatibility\n          mapper(name, outDir => new ArchiveTarget(name, outDir, this, targets.some(it => it === \"dmg\") && (electronUpdaterCompatibility == null || semver.satisfies(\"2.16.0\", electronUpdaterCompatibility))))\n          break\n\n        case \"pkg\":\n          mapper(name, outDir => new PkgTarget(this, outDir))\n          break\n\n        default:\n          mapper(name, outDir => name === \"mas\" || name === \"mas-dev\" ? new NoOpTarget(name) : createCommonTarget(name, outDir, this))\n          break\n      }\n    }\n  }\n\n  get platform() {\n    return Platform.MAC\n  }\n\n  async pack(outDir: string, arch: Arch, targets: Array<Target>, taskManager: AsyncTaskManager): Promise<any> {\n    let nonMasPromise: Promise<any> | null = null\n\n    const hasMas = targets.length !== 0 && targets.some(it => it.name === \"mas\" || it.name === \"mas-dev\")\n    const prepackaged = this.packagerOptions.prepackaged\n\n    if (!hasMas || targets.length > 1) {\n      const appPath = prepackaged == null ? path.join(this.computeAppOutDir(outDir, arch), `${this.appInfo.productFilename}.app`) : prepackaged\n      nonMasPromise = (prepackaged ? BluebirdPromise.resolve() : this.doPack(outDir, path.dirname(appPath), this.platform.nodeName, arch, this.platformSpecificBuildOptions, targets))\n        .then(() => this.sign(appPath, null, null))\n        .then(() => this.packageInDistributableFormat(appPath, Arch.x64, targets, taskManager))\n    }\n\n    for (const target of targets) {\n      const targetName = target.name\n      if (!(targetName === \"mas\" || targetName === \"mas-dev\")) {\n        continue\n      }\n\n      const masBuildOptions = deepAssign({}, this.platformSpecificBuildOptions, (this.config as any).mas)\n      if (targetName === \"mas-dev\") {\n        deepAssign(masBuildOptions, (this.config as any)[targetName], {\n          type: \"development\",\n        })\n      }\n\n      const targetOutDir = path.join(outDir, targetName)\n      if (prepackaged == null) {\n        await this.doPack(outDir, targetOutDir, \"mas\", arch, masBuildOptions, [target])\n        await this.sign(path.join(targetOutDir, `${this.appInfo.productFilename}.app`), targetOutDir, masBuildOptions)\n      }\n      else {\n        await this.sign(prepackaged, targetOutDir, masBuildOptions)\n      }\n    }\n\n    if (nonMasPromise != null) {\n      await nonMasPromise\n    }\n  }\n\n  private async sign(appPath: string, outDir: string | null, masOptions: MasConfiguration | null): Promise<void> {\n    if (!isSignAllowed()) {\n      return\n    }\n\n    const isMas = masOptions != null\n    const macOptions = this.platformSpecificBuildOptions\n    const qualifier = (isMas ? masOptions!.identity : null) || macOptions.identity\n\n    if (!isMas && qualifier === null) {\n      if (this.forceCodeSigning) {\n        throw new Error(\"identity explicitly is set to null, but forceCodeSigning is set to true\")\n      }\n      log(\"identity explicitly is set to null, skipping macOS application code signing.\")\n      return\n    }\n\n    const keychainName = (await this.codeSigningInfo).keychainName\n    const explicitType = isMas ? masOptions!.type : macOptions.type\n    const type = explicitType || \"distribution\"\n    const isDevelopment = type === \"development\"\n    const certificateType = getCertificateType(isMas, isDevelopment)\n    let identity = await findIdentity(certificateType, qualifier, keychainName)\n    if (identity == null) {\n      if (!isMas && !isDevelopment && explicitType !== \"distribution\") {\n        identity = await findIdentity(\"Mac Developer\", qualifier, keychainName)\n        if (identity != null) {\n          warn(\"Mac Developer is used to sign app — it is only for development and testing, not for production\")\n        }\n      }\n\n      if (identity == null) {\n        await reportError(isMas, certificateType, qualifier, keychainName, this.forceCodeSigning)\n        return\n      }\n    }\n\n    const signOptions: any = {\n      \"identity-validation\": false,\n      // https://github.com/electron-userland/electron-builder/issues/1699\n      // kext are signed by the chipset manufacturers. You need a special certificate (only available on request) from Apple to be able to sign kext.\n      ignore: (file: string) => {\n        return file.endsWith(\".kext\") || file.startsWith(\"/Contents/PlugIns\", appPath.length) ||\n          // https://github.com/electron-userland/electron-builder/issues/2010\n          file.includes(\"/node_modules/puppeteer/.local-chromium\")\n      },\n      identity: identity!,\n      type,\n      platform: isMas ? \"mas\" : \"darwin\",\n      version: this.config.electronVersion,\n      app: appPath,\n      keychain: keychainName || undefined,\n      binaries:  (isMas && masOptions != null ? masOptions.binaries : macOptions.binaries) || undefined,\n      requirements: isMas || macOptions.requirements == null ? undefined : await this.getResource(macOptions.requirements),\n      \"gatekeeper-assess\": appleCertificatePrefixes.find(it => identity!.name.startsWith(it)) != null\n    }\n\n    await this.adjustSignOptions(signOptions, masOptions)\n    await task(`Signing app (identity: ${identity.hash} ${identity.name})`, this.doSign(signOptions))\n\n    // https://github.com/electron-userland/electron-builder/issues/1196#issuecomment-312310209\n    if (masOptions != null && !isDevelopment) {\n      const certType = isDevelopment ? \"Mac Developer\" : \"3rd Party Mac Developer Installer\"\n      const masInstallerIdentity = await findIdentity(certType, masOptions.identity, keychainName)\n      if (masInstallerIdentity == null) {\n        throw new Error(`Cannot find valid \"${certType}\" identity to sign MAS installer, please see https://electron.build/code-signing`)\n      }\n\n      const artifactName = this.expandArtifactNamePattern(masOptions, \"pkg\")\n      const artifactPath = path.join(outDir!, artifactName)\n      await this.doFlat(appPath, artifactPath, masInstallerIdentity, keychainName)\n      this.dispatchArtifactCreated(artifactPath, null, Arch.x64, this.computeSafeArtifactName(artifactName, \"pkg\"))\n    }\n  }\n\n  private async adjustSignOptions(signOptions: any, masOptions: MasConfiguration | null) {\n    const resourceList = await this.resourceList\n    if (resourceList.includes(`entitlements.osx.plist`)) {\n      throw new Error(\"entitlements.osx.plist is deprecated name, please use entitlements.mac.plist\")\n    }\n    if (resourceList.includes(`entitlements.osx.inherit.plist`)) {\n      throw new Error(\"entitlements.osx.inherit.plist is deprecated name, please use entitlements.mac.inherit.plist\")\n    }\n\n    const customSignOptions = masOptions || this.platformSpecificBuildOptions\n    const entitlementsSuffix = masOptions == null ? \"mac\" : \"mas\"\n    if (customSignOptions.entitlements == null) {\n      const p = `entitlements.${entitlementsSuffix}.plist`\n      if (resourceList.includes(p)) {\n        signOptions.entitlements = path.join(this.buildResourcesDir, p)\n      }\n    }\n    else {\n      signOptions.entitlements = customSignOptions.entitlements\n    }\n\n    if (customSignOptions.entitlementsInherit == null) {\n      const p = `entitlements.${entitlementsSuffix}.inherit.plist`\n      if (resourceList.includes(p)) {\n        signOptions[\"entitlements-inherit\"] = path.join(this.buildResourcesDir, p)\n      }\n    }\n    else {\n      signOptions[\"entitlements-inherit\"] = customSignOptions.entitlementsInherit\n    }\n  }\n\n  //noinspection JSMethodCanBeStatic\n  protected async doSign(opts: SignOptions): Promise<any> {\n    return signAsync(opts)\n  }\n\n  //noinspection JSMethodCanBeStatic\n  protected async doFlat(appPath: string, outFile: string, identity: Identity, keychain: string | null | undefined): Promise<any> {\n    // productbuild doesn't created directory for out file\n    await ensureDir(path.dirname(outFile))\n\n    const args = prepareProductBuildArgs(identity, keychain)\n    args.push(\"--component\", appPath, \"/Applications\")\n    args.push(outFile)\n    return await exec(\"productbuild\", args)\n  }\n\n  public getElectronSrcDir(dist: string) {\n    return path.resolve(this.projectDir, dist, this.electronDistMacOsAppName)\n  }\n\n  public getElectronDestinationDir(appOutDir: string) {\n    return path.join(appOutDir, this.electronDistMacOsAppName)\n  }\n}\n\nfunction getCertificateType(isMas: boolean, isDevelopment: boolean): CertType {\n  if (isDevelopment) {\n    return \"Mac Developer\"\n  }\n  return isMas ? \"3rd Party Mac Developer Application\" : \"Developer ID Application\"\n}"]}
