{"version":3,"file":"config.js","sourceRoot":"","sources":["../../src/util/config.ts"],"names":[],"mappings":"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","sourcesContent":["import { asArray, DebugLogger, log, warn } from \"builder-util\"\nimport { statOrNull } from \"builder-util/out/fs\"\nimport { readJson } from \"fs-extra-p\"\nimport { Lazy } from \"lazy-val\"\nimport * as path from \"path\"\nimport { getConfig as _getConfig, loadParentConfig, orNullIfFileNotExist, ReadConfigRequest, validateConfig as _validateConfig } from \"read-config-file\"\nimport { deepAssign } from \"read-config-file/out/deepAssign\"\nimport { Configuration } from \"../configuration\"\nimport { reactCra } from \"../presets/rectCra\"\n\n// https://github.com/electron-userland/electron-builder/issues/1847\nfunction mergePublish(config: Configuration, configFromOptions: Configuration) {\n  // if config from disk doesn't have publish (or object), no need to handle, it will be simply merged by deepAssign\n  const publish = Array.isArray(config.publish) ? configFromOptions.publish : null\n  if (publish != null) {\n    delete (configFromOptions as any).publish\n  }\n\n  deepAssign(config, configFromOptions)\n\n  if (publish == null) {\n    return\n  }\n\n  const listOnDisk = config.publish as Array<any>\n  if (listOnDisk.length === 0) {\n    config.publish = publish\n  }\n  else {\n    // apply to first\n    Object.assign(listOnDisk[0], publish)\n  }\n}\n\n/** @internal */\nexport async function getConfig(projectDir: string, configPath: string | null, configFromOptions: Configuration | null | undefined, packageMetadata: Lazy<{ [key: string]: any } | null> = new Lazy(() => orNullIfFileNotExist(readJson(path.join(projectDir, \"package.json\"))))): Promise<Configuration> {\n  const configRequest: ReadConfigRequest = {packageKey: \"build\", configFilename: \"electron-builder\", projectDir, packageMetadata, log}\n  const config = await _getConfig<Configuration>(configRequest, configPath)\n  if (configFromOptions != null) {\n    mergePublish(config, configFromOptions)\n  }\n\n  let extendsSpec = config.extends\n  if (extendsSpec == null && extendsSpec !== null) {\n    const devDependencies = (await packageMetadata.value || {}).devDependencies\n    if (devDependencies != null) {\n      if (\"react-scripts\" in devDependencies) {\n        extendsSpec = \"react-cra\"\n        config.extends = extendsSpec\n      }\n      else if (\"electron-webpack\" in devDependencies) {\n        extendsSpec = \"electron-webpack/electron-builder.yml\"\n        config.extends = extendsSpec\n      }\n    }\n  }\n\n  if (extendsSpec == null) {\n    return config\n  }\n\n  let parentConfig: Configuration | null\n  if (extendsSpec === \"react-cra\") {\n    parentConfig = await reactCra(projectDir)\n  }\n  else {\n    parentConfig = await loadParentConfig<Configuration>(configRequest, extendsSpec)\n  }\n\n  // electron-webpack and electrify client config - want to exclude some files\n  // we add client files configuration to main parent file matcher\n  if (parentConfig.files != null && config.files != null && (Array.isArray(config.files) || typeof config.files === \"string\") && Array.isArray(parentConfig.files) && parentConfig.files.length > 0) {\n    const mainFileSet = parentConfig.files[0]\n    if (typeof mainFileSet === \"object\" && (mainFileSet.from == null || mainFileSet.from === \".\")) {\n      mainFileSet.filter = asArray(mainFileSet.filter)\n      mainFileSet.filter.push(...asArray(config.files as any))\n      delete (config as any).files\n    }\n  }\n\n  return deepAssign(parentConfig, config)\n}\n\nconst schemeDataPromise = new Lazy(() => readJson(path.join(__dirname, \"..\", \"..\", \"scheme.json\")))\n\n/** @internal */\nexport async function validateConfig(config: Configuration, debugLogger: DebugLogger) {\n  const extraMetadata = config.extraMetadata\n  if (extraMetadata != null) {\n    if (extraMetadata.build != null) {\n      throw new Error(`--em.build is deprecated, please specify as -c\"`)\n    }\n    if (extraMetadata.directories != null) {\n      throw new Error(`--em.directories is deprecated, please specify as -c.directories\"`)\n    }\n  }\n\n  // noinspection JSDeprecatedSymbols\n  if (config.npmSkipBuildFromSource === false) {\n    config.buildDependenciesFromSource = false\n  }\n\n  await _validateConfig(config, schemeDataPromise, (message, errors) => {\n    if (debugLogger.enabled) {\n      debugLogger.add(\"invalidConfig\", JSON.stringify(errors, null, 2))\n    }\n\n    return `${message}\n\nHow to fix:\n1. Open https://electron.build/configuration/configuration\n2. Search the option name on the page.\n  * Not found? The option was deprecated or not exists (check spelling).\n  * Found? Check that the option in the appropriate place. e.g. \"title\" only in the \"dmg\", not in the root.\n`\n  })\n}\n\nconst DEFAULT_APP_DIR_NAMES = [\"app\", \"www\"]\n\n/** @internal */\nexport async function computeDefaultAppDirectory(projectDir: string, userAppDir: string | null | undefined): Promise<string> {\n  if (userAppDir != null) {\n    const absolutePath = path.resolve(projectDir, userAppDir)\n    const stat = await statOrNull(absolutePath)\n    if (stat == null) {\n      throw new Error(`Application directory ${userAppDir} doesn't exists`)\n    }\n    else if (!stat.isDirectory()) {\n      throw new Error(`Application directory ${userAppDir} is not a directory`)\n    }\n    else if (projectDir === absolutePath) {\n      warn(`Specified application directory \"${userAppDir}\" equals to project dir — superfluous or wrong configuration`)\n    }\n    return absolutePath\n  }\n\n  for (const dir of DEFAULT_APP_DIR_NAMES) {\n    const absolutePath = path.join(projectDir, dir)\n    const packageJson = path.join(absolutePath, \"package.json\")\n    const stat = await statOrNull(packageJson)\n    if (stat != null && stat.isFile()) {\n      return absolutePath\n    }\n  }\n  return projectDir\n}"]}
