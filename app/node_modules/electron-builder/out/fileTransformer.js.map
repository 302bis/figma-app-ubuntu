{"version":3,"file":"fileTransformer.js","sourceRoot":"","sources":["../src/fileTransformer.ts"],"names":[],"mappings":"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","sourcesContent":["import { debug, warn } from \"builder-util\"\nimport { FileTransformer } from \"builder-util/out/fs\"\nimport { readJson } from \"fs-extra-p\"\nimport * as path from \"path\"\nimport { deepAssign } from \"read-config-file/out/deepAssign\"\nimport { Packager } from \"./packager\"\n\n/** @internal */\nexport function isElectronCompileUsed(info: Packager): boolean {\n  if (info.config.electronCompile != null) {\n    return info.config.electronCompile\n  }\n\n  // if in devDependencies - it means that babel is used for precompilation or for some reason user decided to not use electron-compile for production\n  return hasDep(\"electron-compile\", info)\n}\n\n/** @internal */\nexport function hasDep(name: string, info: Packager) {\n  const deps = info.metadata.dependencies\n  return deps != null && name in deps\n}\n\n/** @internal */\nexport function createTransformer(srcDir: string, extraMetadata: any): FileTransformer {\n  const mainPackageJson = path.join(srcDir, \"package.json\")\n  return file => {\n    if (file === mainPackageJson) {\n      return modifyMainPackageJson(file, extraMetadata)\n    }\n    else if (file.endsWith(\"/package.json\") && file.includes(\"/node_modules/\")) {\n      return readJson(file)\n        .then(it => cleanupPackageJson(it, false))\n        .catch(e => warn(e))\n    }\n    else {\n      return null\n    }\n  }\n}\n\n/** @internal */\nexport interface CompilerHost {\n  compile(file: string): any\n\n  saveConfiguration(): Promise<any>\n}\n\n/** @internal */\nexport function createElectronCompilerHost(projectDir: string, cacheDir: string): Promise<CompilerHost> {\n  const electronCompilePath = path.join(projectDir, \"node_modules\", \"electron-compile\", \"lib\")\n  return require(path.join(electronCompilePath, \"config-parser\")).createCompilerHostFromProjectRoot(projectDir, cacheDir)\n}\n\nconst ignoredPackageMetadataProperties = new Set([\"dist\", \"gitHead\", \"keywords\", \"build\", \"scripts\", \"jspm\", \"ava\", \"xo\", \"nyc\", \"eslintConfig\"])\n\nfunction cleanupPackageJson(data: any, isMain: boolean): any {\n  const deps = data.dependencies\n  // https://github.com/electron-userland/electron-builder/issues/507#issuecomment-312772099\n  const isRemoveBabel = deps != null && typeof deps === \"object\" && !Object.getOwnPropertyNames(deps).some(it => it.startsWith(\"babel\"))\n  try {\n    let changed = false\n    for (const prop of Object.getOwnPropertyNames(data)) {\n      // removing devDependencies from package.json breaks levelup in electron, so, remove it only from main package.json\n      if (prop[0] === \"_\" || ignoredPackageMetadataProperties.has(prop) || (isMain && prop === \"devDependencies\") || (isRemoveBabel && prop === \"babel\")) {\n        delete data[prop]\n        changed = true\n      }\n    }\n\n    if (changed) {\n      return JSON.stringify(data, null, 2)\n    }\n  }\n  catch (e) {\n    debug(e)\n  }\n\n  return null\n}\n\nasync function modifyMainPackageJson(file: string, extraMetadata: any) {\n  const mainPackageData = await readJson(file)\n  if (extraMetadata != null) {\n    deepAssign(mainPackageData, extraMetadata)\n  }\n\n  // https://github.com/electron-userland/electron-builder/issues/1212\n  const serializedDataIfChanged = cleanupPackageJson(mainPackageData, true)\n  if (serializedDataIfChanged != null) {\n    return serializedDataIfChanged\n  }\n  else if (extraMetadata != null) {\n    return JSON.stringify(mainPackageData, null, 2)\n  }\n  return null\n}"]}
