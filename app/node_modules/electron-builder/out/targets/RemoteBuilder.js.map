{"version":3,"file":"RemoteBuilder.js","sourceRoot":"","sources":["../../src/targets/RemoteBuilder.ts"],"names":[],"mappings":"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","sourcesContent":["import { path7za } from \"7zip-bin\"\nimport { constants, connect, ClientHttp2Stream, OutgoingHttpHeaders } from \"http2\"\nimport BluebirdPromise from \"bluebird-lst\"\nimport { spawn } from \"child_process\"\nimport { Packager } from \"../packager\"\nimport { debug } from \"builder-util\"\nimport * as path from \"path\"\nimport { createWriteStream } from \"fs\"\n\nconst {\n  HTTP2_HEADER_PATH,\n  HTTP2_METHOD_POST,\n  HTTP2_HEADER_METHOD,\n  HTTP2_HEADER_CONTENT_TYPE,\n  HTTP2_HEADER_STATUS,\n  HTTP_STATUS_OK,\n  HTTP_STATUS_BAD_REQUEST\n} = constants\n\ninterface RemoteBuilderResponse {\n  error?: string\n}\n\nexport class RemoteBuilder {\n  async build(platform: string, targets: Array<string>, unpackedDirectory: string, packager: Packager, outDir: string): Promise<any> {\n    const result = await this.sendRequest({\n      \"x-targets\": targets,\n      \"x-platform\": platform,\n    }, unpackedDirectory, packager, outDir)\n    if (result != null && result.error != null) {\n      throw new Error(`Remote builder error (if you think that it is not your application misconfiguration issue, please file issue to https://github.com/electron-userland/electron-builder/issues):\\n\\n${result.error}`)\n    }\n  }\n\n  private sendRequest(customHeaders: OutgoingHttpHeaders, unpackedDirectory: string, packager: Packager, outDir: string): Promise<RemoteBuilderResponse | null> {\n    const buildServiceEndpoint = process.env.ELECTRON_BUILD_SERVICE_ENDPOINT\n    if (buildServiceEndpoint == null) {\n      throw new Error(\"Please set env ELECTRON_BUILD_SERVICE_ENDPOINT to URL of Electron Build Service URL\")\n    }\n\n    const client = connect(buildServiceEndpoint)\n    return new BluebirdPromise<RemoteBuilderResponse>((resolve, reject) => {\n      client.on(\"socketError\", reject)\n      client.on(\"error\", reject)\n\n      let handled = false\n\n      let files: Array<string> | null  = null\n      let finishedStreamCount = 0\n      client.on(\"stream\", (stream, headers) => {\n        const file = headers[HTTP2_HEADER_PATH] as string\n\n        if (debug.enabled) {\n          debug(`Remote builder stream: ${file}`)\n        }\n\n        const localFile = path.join(outDir, file)\n        const fileStream = createWriteStream(localFile)\n        fileStream.on(\"error\", reject)\n        stream.on(\"error\", reject)\n        stream.on(\"end\", () => {\n          finishedStreamCount++\n          if (debug.enabled) {\n            debug(`Remote artifact saved to: ${localFile}`)\n          }\n          if (files != null && finishedStreamCount >= files.length) {\n            resolve()\n          }\n        })\n        stream.pipe(fileStream)\n      })\n\n      client.on(\"close\", () => {\n        if (!handled) {\n          reject(new Error(\"Closed unexpectedly\"))\n        }\n      })\n      client.on(\"timeout\", () => {\n        if (!handled) {\n          reject(new Error(\"Timeout\"))\n        }\n      })\n\n      const stream = client.request({\n        [HTTP2_HEADER_PATH]: \"/v1/build\",\n        [HTTP2_HEADER_METHOD]: HTTP2_METHOD_POST,\n        [HTTP2_HEADER_CONTENT_TYPE]: \"application/octet-stream\",\n        ...customHeaders,\n      })\n      stream.on(\"error\", reject)\n\n      uploadUnpackedAppArchive(stream, unpackedDirectory, path.join(packager.appDir, \"package.json\"), resolve, reject)\n\n      stream.on(\"response\", headers => {\n        handled = true\n\n        const status: number = headers[HTTP2_HEADER_STATUS] as any\n        if (status !== HTTP_STATUS_OK && status !== HTTP_STATUS_BAD_REQUEST) {\n          reject(`Error: ${status}`)\n          return\n        }\n\n        let data = \"\"\n        stream.setEncoding(\"utf8\")\n        stream.on(\"data\", (chunk: string) => {\n          data += chunk\n        })\n        stream.on(\"end\", () => {\n          const result = data.length === 0 ? {} : JSON.parse(data)\n          if (debug.enabled) {\n            debug(`Remote builder result: ${JSON.stringify(result, null, 2)}`)\n          }\n\n          if (status === HTTP_STATUS_BAD_REQUEST) {\n            reject(new Error(JSON.stringify(result, null, 2)))\n            return\n          }\n\n          files = result.files\n          if (files == null) {\n            if (result.error == null) {\n              reject(\"Incorrect result, list of files is expected\")\n            }\n            else {\n              resolve(result)\n            }\n            return\n          }\n\n          // pushed streams can be already handled\n          if (finishedStreamCount >= files!!.length) {\n            resolve()\n          }\n        })\n      })\n    })\n      .catch(error => {\n        client.destroy()\n        throw error\n      })\n  }\n}\n\n// compress and upload in the same time, directly to remote without intermediate local file\nfunction uploadUnpackedAppArchive(stream: ClientHttp2Stream, unpackedDirectory: string, appPackageJson: string, resolve: () => void, reject: (error: Error) => void) {\n  if (debug.enabled) {\n    debug(`Use ${appPackageJson} as project package.json for remote build`)\n  }\n\n  // noinspection SpellCheckingInspection\n  const tarProcess = spawn(path7za, [\"a\", \"dummy\", \"-ttar\", \"-so\", unpackedDirectory, appPackageJson], {\n    stdio: [\"pipe\", \"pipe\", process.stderr],\n  })\n  tarProcess.stdout.on(\"error\", reject)\n\n  const zstdProcess = spawn(\"zstd\", [\"-\" + (process.env.RB_ZSTD_COMPRESSION || \"22\"), \"--long\"], {\n    stdio: [\"pipe\", \"pipe\", process.stderr],\n  })\n  zstdProcess.on(\"error\", reject)\n  tarProcess.stdout.pipe(zstdProcess.stdin)\n  zstdProcess.stdout.pipe(stream)\n}"]}
