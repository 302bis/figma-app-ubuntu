{"version":3,"file":"snap.js","sourceRoot":"","sources":["../../src/targets/snap.ts"],"names":[],"mappings":"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","sourcesContent":["import { Arch, debug, exec, log, replaceDefault, spawn, toLinuxArchString, serializeToYaml } from \"builder-util\"\nimport { copyFile } from \"builder-util/out/fs\"\nimport { emptyDir, outputFile } from \"fs-extra-p\"\nimport { homedir } from \"os\"\nimport * as path from \"path\"\nimport { Target } from \"../core\"\nimport { LinuxPackager } from \"../linuxPackager\"\nimport { SnapOptions } from \"../options/SnapOptions\"\nimport { LinuxTargetHelper } from \"./LinuxTargetHelper\"\nimport { RemoteBuilder } from \"./RemoteBuilder\"\n\nexport default class SnapTarget extends Target {\n  readonly options: SnapOptions = {...this.packager.platformSpecificBuildOptions, ...(this.packager.config as any)[this.name]}\n\n  constructor(name: string, private readonly packager: LinuxPackager, private readonly helper: LinuxTargetHelper, readonly outDir: string) {\n    super(name)\n  }\n\n  async build(appOutDir: string, arch: Arch): Promise<any> {\n    log(`Building Snap for arch ${Arch[arch]}`)\n\n    if (process.platform === \"win32\" || process.env._REMOTE_BUILD) {\n      const remoteBuilder = new RemoteBuilder()\n      return await remoteBuilder.build(\"linux\", [\"snap\"], appOutDir, this.packager.info, this.outDir)\n    }\n\n    const packager = this.packager\n    const appInfo = packager.appInfo\n    const options = this.options\n\n    const stageDir = `${appOutDir}-snap`\n    const snapDir = path.join(stageDir, \"snap\")\n    await emptyDir(stageDir)\n\n    const extraSnapSourceDir = path.join(stageDir, \"extra\")\n    const isUseUbuntuPlatform = options.ubuntuAppPlatformContent != null\n    if (isUseUbuntuPlatform) {\n      // ubuntu-app-platform requires empty directory\n      await emptyDir(path.join(extraSnapSourceDir, \"ubuntu-app-platform\"))\n    }\n\n    const snap: any = {}\n    snap.name = packager.executableName.toLowerCase()\n    snap.version = appInfo.version\n    snap.summary = options.summary || appInfo.productName\n    snap.description = this.helper.getDescription(options)\n    snap.confinement = options.confinement || \"strict\"\n    snap.grade = options.grade || \"stable\"\n\n    await this.helper.icons\n    if (this.helper.maxIconPath != null) {\n      snap.icon = \"snap/gui/icon.png\"\n      await copyFile(this.helper.maxIconPath, path.join(snapDir, \"gui\", \"icon.png\"))\n    }\n\n    const desktopFile = await this.helper.writeDesktopEntry(this.options, packager.executableName, path.join(snapDir, \"gui\", `${snap.name}.desktop`), {\n      // tslint:disable:no-invalid-template-strings\n      Icon: \"${SNAP}/meta/gui/icon.png\"\n    })\n\n    if (options.assumes != null) {\n      if (!Array.isArray(options.assumes)) {\n        throw new Error(\"snap.assumes must be an array of strings\")\n      }\n      snap.assumes = options.assumes\n    }\n\n    snap.apps = {\n      [snap.name]: {\n        command: `env TMPDIR=$XDG_RUNTIME_DIR desktop-launch $SNAP/${packager.executableName}`,\n        plugs: replaceDefault(options.plugs, [\"home\", \"x11\", \"unity7\", \"browser-support\", \"network\", \"gsettings\", \"pulseaudio\", \"opengl\"])\n      }\n    }\n\n    if (isUseUbuntuPlatform) {\n      snap.apps[snap.name].plugs.push(\"platform\")\n      snap.plugs = {\n        platform: {\n          interface: \"content\",\n          content: \"ubuntu-app-platform1\",\n          target: \"ubuntu-app-platform\",\n          \"default-provider\": \"ubuntu-app-platform\",\n        }\n      }\n    }\n\n    let isUseDocker = process.platform !== \"linux\"\n    if (process.platform === \"darwin\" && process.env.USE_SYSTEM_SNAPCAFT) {\n      try {\n        // http://click.pocoo.org/5/python3/\n        const env: any = {...process.env}\n        delete env.VERSIONER_PYTHON_VERSION\n        delete env.VERSIONER_PYTHON_PREFER_32_BIT\n        await exec(\"snapcraft\", [\"--version\"], {\n          // execution because Python 3 was configured to use ASCII as encoding for the environment\n          env,\n        })\n        isUseDocker = false\n      }\n      catch (e) {\n        debug(`snapcraft not installed: ${e}`)\n      }\n    }\n\n    // libxss1, libasound2, gconf2 - was \"error while loading shared libraries: libXss.so.1\" on Xubuntu 16.04\n    const defaultStagePackages = (isUseUbuntuPlatform ? [\"libnss3\"] : [\"libnotify4\", \"libappindicator1\", \"libxtst6\", \"libnss3\", \"libxss1\", \"fontconfig-config\", \"gconf2\", \"libasound2\", \"pulseaudio\"])\n    const defaultAfter = isUseUbuntuPlatform ? [\"extra\", \"desktop-ubuntu-app-platform\"] : [\"desktop-glib-only\"]\n    const after = replaceDefault(options.after, defaultAfter)\n    snap.parts = {\n      app: {\n        plugin: \"dump\",\n        \"stage-packages\": replaceDefault(options.stagePackages, defaultStagePackages),\n        source: isUseDocker ? `/out/${path.basename(appOutDir)}` : appOutDir,\n        after\n      }\n    }\n\n    if (isUseUbuntuPlatform) {\n      snap.parts.extra = {\n        plugin: \"dump\",\n        source: isUseDocker ? `/out/${path.basename(stageDir)}/${path.basename(extraSnapSourceDir)}` : extraSnapSourceDir\n      }\n    }\n\n    if (packager.packagerOptions.effectiveOptionComputed != null && await packager.packagerOptions.effectiveOptionComputed({snap, desktopFile})) {\n      return\n    }\n\n    const snapcraft = path.join(snapDir, \"snapcraft.yaml\")\n    await outputFile(snapcraft, serializeToYaml(snap))\n\n    const snapFileName = `${snap.name}_${snap.version}_${toLinuxArchString(arch)}.snap`\n    const resultFile = path.join(this.outDir, snapFileName)\n\n    if (isUseDocker) {\n      const commands: Array<string> = []\n      if (options.buildPackages && options.buildPackages.length > 0) {\n        commands.push(`apt-get update && apt-get install -y ${options.buildPackages.join(\" \")}`)\n      }\n\n      // https://bugs.launchpad.net/snapcraft/+bug/1692752\n      // commands.push(\"snapcraft --version\")\n      commands.push(`cp -R /out/${path.basename(stageDir)} /s/`)\n      commands.push(\"cd /s\")\n      commands.push(`snapcraft snap --target-arch ${toLinuxArchString(arch)} -o /out/${snapFileName}`)\n\n      await spawn(\"docker\", [\"run\", \"--rm\",\n        \"-v\", `${packager.info.projectDir}:/project`,\n        \"-v\", `${homedir()}/.electron:/root/.electron`,\n        // dist dir can be outside of project dir\n        \"-v\", `${this.outDir}:/out`,\n        \"electronuserland/builder:latest\",\n        \"/bin/bash\", \"-c\", commands.join(\" && \")], {\n        cwd: packager.info.projectDir,\n        stdio: [\"ignore\", \"inherit\", \"inherit\"],\n      })\n    }\n    else {\n      if (options.buildPackages && options.buildPackages.length > 0) {\n        await spawn(\"apt-get\", [\"update\"])\n        await spawn(\"apt-get\", [\"install\", \"-y\"].concat(options.buildPackages))\n      }\n      await spawn(\"snapcraft\", [\"snap\", \"--target-arch\", toLinuxArchString(arch), \"-o\", resultFile], {\n        cwd: stageDir,\n        stdio: [\"ignore\", \"inherit\", \"pipe\"],\n      })\n    }\n    packager.dispatchArtifactCreated(resultFile, this, arch)\n  }\n}\n"]}
