{"version":3,"file":"AppImageTarget.js","sourceRoot":"","sources":["../../src/targets/AppImageTarget.ts"],"names":[],"mappings":"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","sourcesContent":["import BluebirdPromise from \"bluebird-lst\"\nimport { Arch, exec, log, debug, serializeToYaml } from \"builder-util\"\nimport { UUID, BlockMapDataHolder } from \"builder-util-runtime\"\nimport { getBinFromGithub } from \"builder-util/out/binDownload\"\nimport { unlinkIfExists, copyOrLinkFile, copyDir, USE_HARD_LINKS } from \"builder-util/out/fs\"\nimport * as ejs from \"ejs\"\nimport { emptyDir, ensureDir, readFile, remove, symlink, writeFile } from \"fs-extra-p\"\nimport { Lazy } from \"lazy-val\"\nimport * as path from \"path\"\nimport { Target } from \"../core\"\nimport { LinuxPackager } from \"../linuxPackager\"\nimport { AppImageOptions } from \"../options/linuxOptions\"\nimport { getTemplatePath } from \"../util/pathManager\"\nimport { LinuxTargetHelper } from \"./LinuxTargetHelper\"\nimport { createDifferentialPackage } from \"app-package-builder\"\nimport { getAppUpdatePublishConfiguration } from \"../publish/PublishManager\"\nimport { RemoteBuilder } from \"./RemoteBuilder\"\n\nconst appRunTemplate = new Lazy<(data: any) => string>(async () => {\n  return ejs.compile(await readFile(path.join(getTemplatePath(\"linux\"), \"AppRun.sh\"), \"utf-8\"))\n})\n\n// https://unix.stackexchange.com/questions/375191/append-to-sub-directory-inside-squashfs-file\nexport default class AppImageTarget extends Target {\n  readonly options: AppImageOptions = {...this.packager.platformSpecificBuildOptions, ...(this.packager.config as any)[this.name]}\n  private readonly desktopEntry: Lazy<string>\n\n  constructor(ignored: string, private readonly packager: LinuxPackager, private readonly helper: LinuxTargetHelper, readonly outDir: string) {\n    super(\"appImage\")\n\n    // we add X-AppImage-BuildId to ensure that new desktop file will be installed\n    this.desktopEntry = new Lazy<string>(() => helper.computeDesktopEntry(this.options, \"AppRun\", {\n      \"X-AppImage-Version\": `${packager.appInfo.buildVersion}`,\n      \"X-AppImage-BuildId\": UUID.v1(),\n    }))\n  }\n\n  async build(appOutDir: string, arch: Arch): Promise<any> {\n    log(`Building AppImage for arch ${Arch[arch]}`)\n\n    if (process.platform === \"win32\" || process.env._REMOTE_BUILD) {\n      const remoteBuilder = new RemoteBuilder()\n      return await remoteBuilder.build(\"linux\", [\"appimage\"], appOutDir, this.packager.info, this.outDir)\n    }\n\n    const packager = this.packager\n\n    // https://github.com/electron-userland/electron-builder/issues/775\n    // https://github.com/electron-userland/electron-builder/issues/1726\n    // tslint:disable-next-line:no-invalid-template-strings\n    const artifactName = packager.expandArtifactNamePattern(this.options, \"AppImage\", arch, \"${name}-${version}-${arch}.${ext}\", false)\n    const artifactPath = path.join(this.outDir, artifactName)\n\n    // pax doesn't like dir with leading dot (e.g. `.__appimage`)\n    const stageDir = path.join(this.outDir, `__appimage-${Arch[arch]}`)\n    const appInStageDir = path.join(stageDir, \"app\")\n    await emptyDir(stageDir)\n    await copyDirUsingHardLinks(appOutDir, appInStageDir)\n\n    const resourceName = `appimagekit-${this.packager.executableName}`\n    const installIcons = await this.copyIcons(stageDir, resourceName)\n\n    const finalDesktopFilename = `${this.packager.executableName}.desktop`\n    await BluebirdPromise.all([\n      unlinkIfExists(artifactPath),\n      writeFile(path.join(stageDir, \"/AppRun\"), (await appRunTemplate.value)({\n        systemIntegration: this.options.systemIntegration || \"ask\",\n        desktopFileName: finalDesktopFilename,\n        executableName: this.packager.executableName,\n        resourceName,\n        installIcons,\n      }), {\n        mode: \"0755\",\n      }),\n      writeFile(path.join(stageDir, finalDesktopFilename), await this.desktopEntry.value),\n    ])\n\n    // must be after this.helper.icons call\n    if (this.helper.maxIconPath == null) {\n      throw new Error(\"Icon is not provided\")\n    }\n\n    //noinspection SpellCheckingInspection\n    const vendorDir = await getBinFromGithub(\"appimage\", \"9.0.2\", \"9Y6o5svZhJMeiVCuzy8PmKk0aERoX7LdqssBkiV/oglwGFvKdR2UK0jCJv5+cU5ZRwheq04npiRJ71qMBGVLIA==\")\n\n    if (arch === Arch.x64 || arch === Arch.ia32) {\n      await copyDir(path.join(vendorDir, \"lib\", arch === Arch.x64 ? \"x86_64-linux-gnu\" : \"i386-linux-gnu\"), path.join(stageDir, \"usr/lib\"), {\n        isUseHardLink: USE_HARD_LINKS,\n      })\n    }\n\n    if (this.packager.packagerOptions.effectiveOptionComputed != null && await this.packager.packagerOptions.effectiveOptionComputed({desktop: await this.desktopEntry.value})) {\n      return\n    }\n\n    const publishConfig = await getAppUpdatePublishConfiguration(packager, arch)\n    if (publishConfig != null) {\n      await writeFile(path.join(packager.getResourcesDir(appInStageDir), \"app-update.yml\"), serializeToYaml(publishConfig))\n    }\n\n    const vendorToolDir = path.join(vendorDir, process.platform === \"darwin\" ? \"darwin\" : `linux-${process.arch}`)\n    // default gzip compression - 51.9, xz - 50.4 difference is negligible, start time - well, it seems, a little bit longer (but on Parallels VM on external SSD disk)\n    // so, to be decided later, is it worth to use xz by default\n    const args = [\n      \"--runtime-file\", path.join(vendorDir, `runtime-${(arch === Arch.ia32 ? \"i686\" : (arch === Arch.x64 ? \"x86_64\" : \"armv7l\"))}`),\n      \"--no-appstream\",\n    ]\n    if (debug.enabled) {\n      args.push(\"--verbose\")\n    }\n    if (packager.compression === \"maximum\") {\n      args.push(\"--comp\", \"xz\")\n    }\n    args.push(stageDir, artifactPath)\n    await exec(path.join(vendorToolDir, \"appimagetool\"), args, {\n      env: {\n        ...process.env,\n        PATH: `${vendorToolDir}:${process.env.PATH}`,\n        // to avoid detection by appimagetool (see extract_arch_from_text about expected arch names)\n        ARCH: arch === Arch.ia32 ? \"i386\" : (arch === Arch.x64 ? \"x86_64\" : \"arm\"),\n      }\n    })\n    if (!debug.enabled) {\n      await remove(stageDir)\n    }\n\n    const blockMapInfo = await createDifferentialPackage(artifactPath)\n    const updateInfo: BlockMapDataHolder = {\n      size: blockMapInfo.size,\n      blockMapSize: blockMapInfo.blockMapSize,\n      sha512: blockMapInfo.sha512,\n    }\n\n    packager.info.dispatchArtifactCreated({\n      file: artifactPath,\n      safeArtifactName: packager.computeSafeArtifactName(artifactName, \"AppImage\", arch, false),\n      target: this,\n      arch,\n      packager,\n      isWriteUpdateInfo: true,\n      updateInfo,\n    })\n  }\n\n  private async copyIcons(stageDir: string, resourceName: string): Promise<string> {\n    const iconDirRelativePath = \"usr/share/icons/hicolor\"\n    const iconDir = path.join(stageDir, iconDirRelativePath)\n    await ensureDir(iconDir)\n\n    // https://github.com/AppImage/AppImageKit/issues/438#issuecomment-319094239\n    // expects icons in the /usr/share/icons/hicolor\n    const iconNames = await BluebirdPromise.map(this.helper.icons, async icon => {\n      const filename = `${this.packager.executableName}.png`\n      const iconSizeDir = `${icon.size}x${icon.size}/apps`\n      const dir = path.join(iconDir, iconSizeDir)\n      await ensureDir(dir)\n      const finalIconFile = path.join(dir, filename)\n      await copyOrLinkFile(icon.file, finalIconFile, null, true)\n\n      if (icon.file === this.helper.maxIconPath) {\n        await symlink(path.relative(stageDir, finalIconFile), path.join(stageDir, filename))\n      }\n      return {filename, iconSizeDir, size: icon.size}\n    })\n\n    let installIcons = \"\"\n    for (const icon of iconNames) {\n      installIcons += `xdg-icon-resource install --noupdate --context apps --size ${icon.size} \"$APPDIR/${iconDirRelativePath}/${icon.iconSizeDir}/${icon.filename}\" \"${resourceName}\"\\n`\n    }\n    return installIcons\n  }\n}\n\n// https://unix.stackexchange.com/questions/202430/how-to-copy-a-directory-recursively-using-hardlinks-for-each-file\nfunction copyDirUsingHardLinks(source: string, destination: string) {\n  if (process.platform !== \"darwin\") {\n    const args = [\"-d\", \"--recursive\", \"--preserve=mode\"]\n    args.push(\"--link\")\n    args.push(source + \"/\", destination + \"/\")\n    return ensureDir(path.dirname(destination)).then(() => exec(\"cp\", args))\n  }\n\n  // pax requires created dir\n  const promise = ensureDir(destination)\n  return promise\n    .then(() => exec(\"pax\", [\"-rwl\", \"-p\", \"amp\" /* Do not preserve file access times, Do not preserve file modification times, Preserve the file mode\tbits */, \".\", destination], {\n      cwd: source,\n    }))\n}"]}
