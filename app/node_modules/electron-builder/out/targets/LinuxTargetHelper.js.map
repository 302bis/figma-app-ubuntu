{"version":3,"file":"LinuxTargetHelper.js","sourceRoot":"","sources":["../../src/targets/LinuxTargetHelper.ts"],"names":[],"mappings":"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","sourcesContent":["import BluebirdPromise from \"bluebird-lst\"\nimport { debug, exec, isEmptyOrSpaces, warn } from \"builder-util\"\nimport { statOrNull } from \"builder-util/out/fs\"\nimport { outputFile, readdir } from \"fs-extra-p\"\nimport * as path from \"path\"\nimport { LinuxPackager } from \"../linuxPackager\"\nimport { LinuxConfiguration, LinuxTargetSpecificOptions } from \"../options/linuxOptions\"\nimport { getTemplatePath } from \"../util/pathManager\"\n\nexport const installPrefix = \"/opt\"\n\nexport interface IconInfo {\n  file: string\n  size: number\n}\n\nexport class LinuxTargetHelper {\n  readonly icons: Promise<Array<IconInfo>>\n\n  maxIconPath: string | null = null\n\n  constructor(private packager: LinuxPackager) {\n    this.icons = this.computeDesktopIcons()\n  }\n\n  // must be name without spaces and other special characters, but not product name used\n  private async computeDesktopIcons(): Promise<Array<IconInfo>> {\n    const packager = this.packager\n    const customIconSetDir = packager.platformSpecificBuildOptions.icon\n    if (customIconSetDir != null) {\n      let iconDir = path.resolve(packager.buildResourcesDir, customIconSetDir)\n      const stat = await statOrNull(iconDir)\n      if (stat == null || !stat.isDirectory()) {\n        iconDir = path.resolve(packager.projectDir, customIconSetDir)\n      }\n\n      try {\n        return await this.iconsFromDir(iconDir)\n      }\n      catch (e) {\n        if (e.code === \"ENOENT\") {\n          throw new Error(`Icon set directory ${iconDir} doesn't exist`)\n        }\n        else if (e.code === \"ENOTDIR\") {\n          throw new Error(`linux.icon must be set to an icon set directory, but ${iconDir} is not a directory. Please see https://electron.build/configuration/configuration#LinuxBuildOptions-icon`)\n        }\n        else {\n          throw e\n        }\n      }\n    }\n\n    const resourceList = await packager.resourceList\n    if (resourceList.includes(\"icons\")) {\n      return await this.iconsFromDir(path.join(packager.buildResourcesDir, \"icons\"))\n    }\n    else {\n      return await this.createFromIcns(await packager.info.tempDirManager.createTempDir({suffix: \".iconset\"}))\n    }\n  }\n\n  private async iconsFromDir(iconDir: string) {\n    const mappings: Array<IconInfo> = []\n    let maxSize = 0\n    for (const file of (await readdir(iconDir))) {\n      if (file.endsWith(\".png\") || file.endsWith(\".PNG\")) {\n        // If parseInt encounters a character that is not a numeral in the specified radix,\n        // it returns the integer value parsed up to that point\n        try {\n          const sizeString = file.match(/\\d+/)\n          const size = sizeString == null ? 0 : parseInt(sizeString[0], 10)\n          if (size > 0) {\n            const iconPath = `${iconDir}/${file}`\n            mappings.push({\n              file: iconPath,\n              size,\n            })\n\n            if (size > maxSize) {\n              maxSize = size\n              this.maxIconPath = iconPath\n            }\n          }\n        }\n        catch (e) {\n          console.error(e)\n        }\n      }\n    }\n\n    if (mappings.length === 0) {\n      throw new Error(`Icon set directory ${iconDir} doesn't contain icons`)\n    }\n\n    return mappings\n  }\n\n  private async getIcns(): Promise<string | null> {\n    const build = this.packager.config\n    let iconPath = (build.mac || {}).icon || build.icon\n    if (iconPath != null && !iconPath.endsWith(\".icns\")) {\n      iconPath += \".icns\"\n    }\n    return iconPath == null ? await this.packager.getDefaultIcon(\"icns\") : path.resolve(this.packager.projectDir, iconPath)\n  }\n\n  getDescription(options: LinuxConfiguration) {\n    return options.description || this.packager.appInfo.description\n  }\n\n  async writeDesktopEntry(targetSpecificOptions: LinuxTargetSpecificOptions, exec?: string, destination?: string | null, extra?: { [key: string]: string; }): Promise<string> {\n    const data = await this.computeDesktopEntry(targetSpecificOptions, exec, extra)\n    const tempFile = destination || await this.packager.getTempFile(`${this.packager.appInfo.productFilename}.desktop`)\n    await outputFile(tempFile, data)\n    return tempFile\n  }\n\n  async computeDesktopEntry(targetSpecificOptions: LinuxTargetSpecificOptions, exec?: string, extra?: { [key: string]: string; }): Promise<string> {\n    if (exec != null && exec.length === 0) {\n      throw new Error(\"Specified exec is emptyd\")\n    }\n\n    const appInfo = this.packager.appInfo\n\n    const productFilename = appInfo.productFilename\n\n    const desktopMeta: any = {\n      Name: appInfo.productName,\n      Comment: this.getDescription(targetSpecificOptions),\n      Exec: exec == null ? `\"${installPrefix}/${productFilename}/${this.packager.executableName}\" %U` : exec,\n      Terminal: \"false\",\n      Type: \"Application\",\n      Icon: this.packager.executableName,\n      ...extra,\n      ...targetSpecificOptions.desktop,\n    }\n\n    let category = targetSpecificOptions.category\n    if (isEmptyOrSpaces(category)) {\n      const macCategory = (this.packager.config.mac || {}).category\n      if (macCategory != null) {\n        category = macToLinuxCategory[macCategory]\n      }\n\n      if (category == null) {\n        // https://github.com/develar/onshape-desktop-shell/issues/48\n        let message = \"Application category is not set for Linux (linux.category).\\nPlease see https://electron.build/configuration/configuration#LinuxBuildOptions-category\"\n        if (macCategory != null) {\n          message += `\\n Cannot map mac category \"${macCategory}\" to Linux. If possible mapping is known for you, please file issue to add it.`\n        }\n        warn(message)\n        category = \"Utility\"\n      }\n    }\n    desktopMeta.Categories = `${category}${category.endsWith(\";\") ? \"\" : \";\"}`\n\n    let data = `[Desktop Entry]`\n    for (const name of Object.keys(desktopMeta)) {\n      const value = desktopMeta[name]\n      data += `\\n${name}=${value}`\n    }\n    data += \"\\n\"\n    return data\n  }\n\n  private async createFromIcns(tempDir: string): Promise<Array<IconInfo>> {\n    const iconPath = await this.getIcns()\n    if (iconPath == null) {\n      return await this.iconsFromDir(path.join(getTemplatePath(\"linux\"), \"electron-icons\"))\n    }\n\n    if (process.platform === \"darwin\") {\n      await exec(\"iconutil\", [\"--convert\", \"iconset\", \"--output\", tempDir, iconPath])\n      const iconFiles = await readdir(tempDir)\n      const imagePath = iconFiles.includes(\"icon_512x512.png\") ? path.join(tempDir, \"icon_512x512.png\") : path.join(tempDir, \"icon_256x256.png\")\n      this.maxIconPath = imagePath\n\n      function resize(size: number): Promise<any> {\n        const filename = `icon_${size}x${size}.png`\n        return iconFiles.includes(filename) ? BluebirdPromise.resolve() : resizeImage(imagePath, path.join(tempDir, filename), size, size)\n      }\n\n      const promises: Array<Promise<any>> = [resize(24), resize(96)]\n      promises.push(resize(16))\n      promises.push(resize(48))\n      promises.push(resize(64))\n      promises.push(resize(128))\n      await BluebirdPromise.all(promises)\n\n      return this.createMappings(tempDir)\n    }\n    else {\n      const output = await exec(\"icns2png\", [\"-x\", \"-o\", tempDir, iconPath])\n      debug(output)\n\n      //noinspection UnnecessaryLocalVariableJS\n      const has256 = output.includes(\"ic08\")\n      const imagePath = path.join(tempDir, has256 ? \"icon_256x256x32.png\" : \"icon_128x128x32.png\")\n\n      this.maxIconPath = imagePath\n\n      function resize(size: number): Promise<any> {\n        return resizeImage(imagePath, path.join(tempDir, `icon_${size}x${size}x32.png`), size, size)\n      }\n\n      const promises: Array<Promise<any>> = [resize(24), resize(96)]\n      if (!output.includes(\"is32\")) {\n        promises.push(resize(16))\n      }\n      if (!output.includes(\"ih32\")) {\n        promises.push(resize(48))\n      }\n      if (!output.toString().includes(\"icp6\")) {\n        promises.push(resize(64))\n      }\n      if (has256 && !output.includes(\"it32\")) {\n        promises.push(resize(128))\n      }\n\n      await BluebirdPromise.all(promises)\n\n      return this.createMappings(tempDir)\n    }\n  }\n\n  private createMappings(tempDir: string) {\n    function createMapping(size: number): IconInfo {\n      return {\n        file: process.platform === \"darwin\" ? `${tempDir}/icon_${size}x${size}.png` : `${tempDir}/icon_${size}x${size}x32.png`,\n        size,\n      }\n    }\n\n    return [\n      createMapping(16),\n      createMapping(24),\n      createMapping(32),\n      createMapping(48),\n      createMapping(64),\n      createMapping(96),\n      createMapping(128),\n      createMapping(256),\n      createMapping(512),\n    ]\n  }\n}\n\nconst macToLinuxCategory: any = {\n  \"public.app-category.graphics-design\": \"Graphics\",\n  \"public.app-category.developer-tools\": \"Development\",\n  \"public.app-category.education\": \"Education\",\n  \"public.app-category.games\": \"Game\",\n  \"public.app-category.video\": \"Video;AudioVideo\",\n  \"public.app-category.utilities\": \"Utility\",\n  \"public.app-category.social-networking\": \"Chat\",\n}\n\nfunction resizeImage(imagePath: string, result: string, w: number, h: number) {\n  if (process.platform === \"darwin\") {\n    return exec(\"sips\", [\"--resampleHeightWidth\", h.toString(10), w.toString(10), imagePath, \"--out\", result])\n  }\n  else {\n    const sizeArg = `${w}x${h}`\n    return exec(\"gm\", [\"convert\", \"-size\", sizeArg, imagePath, \"-resize\", sizeArg, result])\n  }\n}"]}
