{"version":3,"file":"linuxPackager.js","sourceRoot":"","sources":["../src/linuxPackager.ts"],"names":[],"mappings":";;;;;;;;;AAAA,AAAO,AAAE,AAAM,AAAE,AAAM,AAAY;;;;AACnC,AAAO,AAAK,AAAI,AAAM,AAAM;;;;AAC5B,AAAO,AAAgB,AAAM,AAAmB;;;;;;AAEhD,AAAO,AAAE,AAAU,AAAE,AAAQ,AAAU,AAAM,AAAQ;;;;;;AAGrD,AAAO,AAAE,AAAgB,AAAE,AAAM,AAAoB;;;;;;AAGrD,AAAO,AAAE,AAAiB,AAAE,AAAM,AAA6B;;;;;;AAE/D,AAAO,AAAE,AAAkB,AAAE,AAAM,AAAyB,AAE5D,AAAM;;;;;;;;MAAqB,AAAQ,AAAoC;AAGrE,gBAAY,AAAc;AACxB,AAAK,cAAC,AAAI,AAAC;AAEX,cAAM,AAAc,iBAAG,AAAI,KAAC,AAA4B,6BAAC,AAAc;AACvE,AAAI,aAAC,AAAc,iBAAG,AAAc,kBAAI,AAAI,AAAC,AAAC,OAAC,AAAI,KAAC,AAAO,QAAC,AAAa,cAAC,AAAW,AAAE,AAAC,AAAC,gBAAC,AAAgB,6DAAC,AAAc,AAAC,AAC5H;AAAC;AAED,QAAI,AAAa;AACf,AAAM,eAAC,CAAC,AAAU,AAAC,AACrB;AAAC;AAED,AAAa,kBAAC,AAAsB,SAAE,AAAmE;AACvG,YAAI,AAAgC;AACpC,cAAM,AAAS,YAAG,AAAG,AAAE;AACrB,AAAE,AAAC,gBAAC,AAAM,UAAI,AAAI,AAAC,MAAC,AAAC;AACnB,AAAM,yBAAG,AAAI,AAAiB,wEAAC,AAAI,AAAC,AACtC;AAAC;AACD,AAAM,mBAAC,AAAM,AACf;AAAC;AAED,AAAG,AAAC,aAAC,MAAM,AAAI,QAAI,AAAO,AAAC,SAAC,AAAC;AAC3B,AAAE,AAAC,gBAAC,AAAI,AAAK,AAAU,AAAC,6CAAC,AAAC;AACxB,AAAQ,AACV;AAAC;AAED,kBAAM,AAAW,eAAyE,AAAG,AAAE;AAC7F,AAAM,AAAC,wBAAC,AAAI,AAAC,AAAC,AAAC;AACb,yBAAK,AAAU;AACb,AAAM,+BAAC,AAAO,QAAC,AAA0B,AAAC,4BAAC,AAAO;AACpD,yBAAK,AAAM;AACT,AAAM,+BAAC,AAAO,QAAC,AAAgB,AAAC,kBAAC,AAAO;AAC1C,yBAAK,AAAK,AAAC;AACX,yBAAK,AAAK,AAAC;AACX,yBAAK,AAAI,AAAC;AACV,yBAAK,AAAS,AAAC;AACf,yBAAK,AAAQ,AAAC;AACd,yBAAK,AAAK,AAAC;AACX,yBAAK,AAAK;AACR,AAAM,+BAAC,AAAO,QAAC,AAAe,AAAC,iBAAC,AAAO;AACzC;AACE,AAAM,+BAAC,AAAI,AACf,AAAC,AACH;;AAAC,AAAC,AAAE,aAjBqF;AAmBzF,AAAM,mBAAC,AAAI,MAAE,AAAM,AAAC,AAAE,UAAC,AAAW,gBAAK,AAAI,AAAC,AAAC,OAAC,AAAkB,kEAAC,AAAI,MAAE,AAAM,QAAE,AAAI,AAAC,AAAC,AAAC,QAAC,IAAI,AAAW,YAAC,AAAI,MAAE,AAAI,MAAE,AAAS,AAAE,aAAE,AAAM,AAAC,AAAC,AAC1I;AAAC,AACH;AAAC;AAED,QAAI,AAAQ;AACV,AAAM,eAAC,AAAQ,iCAAC,AAAK,AACvB;AAAC;AAES,AAAW,gBAAC,AAA6B;AACjD,AAAM,eAAC,AAAM,4CAAC,AAAI,MAAC,AAAI,KAAC,AAAW,YAAC,AAAS,WAAE,AAAI,KAAC,AAA0B,AAAC,6BAAE,AAAI,MAAC,AAAI,KAAC,AAAW,YAAC,AAAS,WAAE,AAAI,KAAC,AAAc,AAAC,AAAC,AACzI;AAAC,AACF","sourcesContent":["import { rename } from \"fs-extra-p\"\nimport * as path from \"path\"\nimport sanitizeFileName from \"sanitize-filename\"\nimport { AfterPackContext } from \"./configuration\"\nimport { DIR_TARGET, Platform, Target } from \"./core\"\nimport { LinuxConfiguration } from \"./options/linuxOptions\"\nimport { Packager } from \"./packager\"\nimport { PlatformPackager } from \"./platformPackager\"\nimport AppImageTarget from \"./targets/AppImageTarget\"\nimport FpmTarget from \"./targets/fpm\"\nimport { LinuxTargetHelper } from \"./targets/LinuxTargetHelper\"\nimport SnapTarget from \"./targets/snap\"\nimport { createCommonTarget } from \"./targets/targetFactory\"\n\nexport class LinuxPackager extends PlatformPackager<LinuxConfiguration> {\n  readonly executableName: string\n\n  constructor(info: Packager) {\n    super(info)\n\n    const executableName = this.platformSpecificBuildOptions.executableName\n    this.executableName = executableName == null ? this.appInfo.sanitizedName.toLowerCase() : sanitizeFileName(executableName)\n  }\n\n  get defaultTarget(): Array<string> {\n    return [\"appimage\"]\n  }\n\n  createTargets(targets: Array<string>, mapper: (name: string, factory: (outDir: string) => Target) => void): void {\n    let helper: LinuxTargetHelper | null\n    const getHelper = () => {\n      if (helper == null) {\n        helper = new LinuxTargetHelper(this)\n      }\n      return helper\n    }\n\n    for (const name of targets) {\n      if (name === DIR_TARGET) {\n        continue\n      }\n\n      const targetClass: typeof AppImageTarget | typeof SnapTarget | typeof FpmTarget | null = (() => {\n        switch (name) {\n          case \"appimage\":\n            return require(\"./targets/AppImageTarget\").default\n          case \"snap\":\n            return require(\"./targets/snap\").default\n          case \"deb\":\n          case \"rpm\":\n          case \"sh\":\n          case \"freebsd\":\n          case \"pacman\":\n          case \"apk\":\n          case \"p5p\":\n            return require(\"./targets/fpm\").default\n          default:\n            return null\n        }\n      })()\n\n      mapper(name, outDir => targetClass === null ? createCommonTarget(name, outDir, this) : new targetClass(name, this, getHelper(), outDir))\n    }\n  }\n\n  get platform() {\n    return Platform.LINUX\n  }\n\n  protected postInitApp(packContext: AfterPackContext): Promise<any> {\n    return rename(path.join(packContext.appOutDir, this.electronDistExecutableName), path.join(packContext.appOutDir, this.executableName))\n  }\n}"]}
